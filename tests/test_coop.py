#!/usr/bin/python3

import pytest

from scripts.helpful_scripts import get_account


# With this test we are cheking if COOPTOken ERC20 smart contract is deploying well and if we can sucesfully call mint function after contract ahs been
# deployed and if we can asigne all intial supplay of COOP tokens to alise account (in our project scenario SmartCOOP main contract will be assigned
# with all intial supplay of SmartCOOP tokens)
def test_initial_supplay_account_alice(smartContract_deploy_with_mint):

    coop_token, coop = smartContract_deploy_with_mint
    assert coop_token.balanceOf(coop.address) == 10000_000_000_000_000_000_000


# With this parametrized test we are cheking if all rest of 9 accounts generated by ganache-cli are empty (except account no. 0) by all producer profile
# dimensions from getUserAcountBalance.
@pytest.mark.parametrize("i", range(0, 1))
def test_account_balance(
    smartContract_deploy_with_mint,
    i,
):
    account = get_account()
    balance = smartContract_deploy_with_mint[1].getUserAccountBalance(account[i])
    assert balance[0] == 0 and balance[1] == 0 and balance[2] == 0


# With this test we are cheking if Bob can become Coop member and iff fee payed goes to SmartCOOP account
def test_become_member(smartContract_deploy_with_mint, web3):
    account = get_account()
    tx = smartContract_deploy_with_mint[1].becomeCoopMember(
        {"from": account[0], "value": 1000}
    )
    assert tx.status == 1


# With this test we are checking if Bob can make deposit to Coop warhouse after he first become Coop member
def test_deposit_fruits_for_member(smartContract_deploy_with_mint, web3):
    account = get_account()
    # account = test_accounts()
    coop_return = smartContract_deploy_with_mint
    coop_return[1].becomeCoopMember({"from": account[0], "value": 1000})
    tx = coop_return[1].depositFruitsToCOOP(45, {"from": account[0]})
    assert tx.status == 1


def test_bid(smartContract_deploy_with_mint):
    account = get_account()
    coop_return = smartContract_deploy_with_mint
    coop_return[1].becomeCoopMember({"from": account[0], "value": 1000})
    coop_return[1].depositFruitsToCOOP(45, {"from": account[0]})
    coop_return[1].bid(10, {"from": account[1], "value": 2500051902404600})


# Testing widrowing function for owner of the contract (the who deploy)
def test_withdraw_sucess(smartContract_deploy_with_mint):
    account = get_account()
    tx = smartContract_deploy_with_mint[1].withdraw({"from": account[0]})
    assert tx.return_value == True
