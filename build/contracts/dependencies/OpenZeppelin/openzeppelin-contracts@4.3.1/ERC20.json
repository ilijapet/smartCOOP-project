{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "allSourcePaths": {
    "1": "/home/ilijapet/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.3.1/contracts/token/ERC20/ERC20.sol",
    "2": "/home/ilijapet/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.3.1/contracts/token/ERC20/IERC20.sol",
    "3": "/home/ilijapet/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.3.1/contracts/token/ERC20/extensions/IERC20Metadata.sol",
    "4": "/home/ilijapet/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.3.1/contracts/utils/Context.sol"
  },
  "ast": {
    "absolutePath": "/home/ilijapet/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.3.1/contracts/token/ERC20/ERC20.sol",
    "exportedSymbols": {
      "Context": [
        1035
      ],
      "ERC20": [
        804
      ],
      "IERC20": [
        988
      ],
      "IERC20Metadata": [
        1013
      ]
    },
    "id": 805,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 259,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "33:23:1"
      },
      {
        "absolutePath": "/home/ilijapet/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.3.1/contracts/token/ERC20/IERC20.sol",
        "file": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
        "id": 260,
        "nodeType": "ImportDirective",
        "scope": 805,
        "sourceUnit": 989,
        "src": "58:56:1",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/ilijapet/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.3.1/contracts/token/ERC20/extensions/IERC20Metadata.sol",
        "file": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
        "id": 261,
        "nodeType": "ImportDirective",
        "scope": 805,
        "sourceUnit": 1014,
        "src": "115:75:1",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/ilijapet/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.3.1/contracts/utils/Context.sol",
        "file": "@openzeppelin/contracts/utils/Context.sol",
        "id": 262,
        "nodeType": "ImportDirective",
        "scope": 805,
        "sourceUnit": 1036,
        "src": "191:51:1",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 264,
              "name": "Context",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 1035,
              "src": "1435:7:1"
            },
            "id": 265,
            "nodeType": "InheritanceSpecifier",
            "src": "1435:7:1"
          },
          {
            "baseName": {
              "id": 266,
              "name": "IERC20",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 988,
              "src": "1444:6:1"
            },
            "id": 267,
            "nodeType": "InheritanceSpecifier",
            "src": "1444:6:1"
          },
          {
            "baseName": {
              "id": 268,
              "name": "IERC20Metadata",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 1013,
              "src": "1452:14:1"
            },
            "id": 269,
            "nodeType": "InheritanceSpecifier",
            "src": "1452:14:1"
          }
        ],
        "contractDependencies": [
          988,
          1013,
          1035
        ],
        "contractKind": "contract",
        "documentation": {
          "id": 263,
          "nodeType": "StructuredDocumentation",
          "src": "244:1172:1",
          "text": " @dev Implementation of the {IERC20} interface.\n This implementation is agnostic to the way tokens are created. This means\n that a supply mechanism has to be added in a derived contract using {_mint}.\n For a generic mechanism see {ERC20PresetMinterPauser}.\n TIP: For a detailed writeup see our guide\n https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n to implement supply mechanisms].\n We have followed general OpenZeppelin Contracts guidelines: functions revert\n instead returning `false` on failure. This behavior is nonetheless\n conventional and does not conflict with the expectations of ERC20\n applications.\n Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n This allows applications to reconstruct the allowance for all accounts just\n by listening to said events. Other implementations of the EIP may not emit\n these events, as it isn't required by the specification.\n Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n functions have been added to mitigate the well-known issues around setting\n allowances. See {IERC20-approve}."
        },
        "fullyImplemented": true,
        "id": 804,
        "linearizedBaseContracts": [
          804,
          1013,
          988,
          1035
        ],
        "name": "ERC20",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 273,
            "mutability": "mutable",
            "name": "_balances",
            "nodeType": "VariableDeclaration",
            "scope": 804,
            "src": "1473:45:1",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
              "typeString": "mapping(address => uint256)"
            },
            "typeName": {
              "id": 272,
              "keyType": {
                "id": 270,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "1481:7:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "1473:27:1",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                "typeString": "mapping(address => uint256)"
              },
              "valueType": {
                "id": 271,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "1492:7:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              }
            },
            "visibility": "private"
          },
          {
            "constant": false,
            "id": 279,
            "mutability": "mutable",
            "name": "_allowances",
            "nodeType": "VariableDeclaration",
            "scope": 804,
            "src": "1525:67:1",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
              "typeString": "mapping(address => mapping(address => uint256))"
            },
            "typeName": {
              "id": 278,
              "keyType": {
                "id": 274,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "1533:7:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "1525:47:1",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                "typeString": "mapping(address => mapping(address => uint256))"
              },
              "valueType": {
                "id": 277,
                "keyType": {
                  "id": 275,
                  "name": "address",
                  "nodeType": "ElementaryTypeName",
                  "src": "1552:7:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "nodeType": "Mapping",
                "src": "1544:27:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                  "typeString": "mapping(address => uint256)"
                },
                "valueType": {
                  "id": 276,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "1563:7:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                }
              }
            },
            "visibility": "private"
          },
          {
            "constant": false,
            "id": 281,
            "mutability": "mutable",
            "name": "_totalSupply",
            "nodeType": "VariableDeclaration",
            "scope": 804,
            "src": "1599:28:1",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 280,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "1599:7:1",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "private"
          },
          {
            "constant": false,
            "id": 283,
            "mutability": "mutable",
            "name": "_name",
            "nodeType": "VariableDeclaration",
            "scope": 804,
            "src": "1634:20:1",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_string_storage",
              "typeString": "string"
            },
            "typeName": {
              "id": 282,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "1634:6:1",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "visibility": "private"
          },
          {
            "constant": false,
            "id": 285,
            "mutability": "mutable",
            "name": "_symbol",
            "nodeType": "VariableDeclaration",
            "scope": 804,
            "src": "1660:22:1",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_string_storage",
              "typeString": "string"
            },
            "typeName": {
              "id": 284,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "1660:6:1",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "visibility": "private"
          },
          {
            "body": {
              "id": 301,
              "nodeType": "Block",
              "src": "2052:64:1",
              "statements": [
                {
                  "expression": {
                    "id": 295,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 293,
                      "name": "_name",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 283,
                      "src": "2062:5:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage",
                        "typeString": "string storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 294,
                      "name": "name_",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 288,
                      "src": "2070:5:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string memory"
                      }
                    },
                    "src": "2062:13:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "id": 296,
                  "nodeType": "ExpressionStatement",
                  "src": "2062:13:1"
                },
                {
                  "expression": {
                    "id": 299,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 297,
                      "name": "_symbol",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 285,
                      "src": "2085:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage",
                        "typeString": "string storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 298,
                      "name": "symbol_",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 290,
                      "src": "2095:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string memory"
                      }
                    },
                    "src": "2085:17:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "id": 300,
                  "nodeType": "ExpressionStatement",
                  "src": "2085:17:1"
                }
              ]
            },
            "documentation": {
              "id": 286,
              "nodeType": "StructuredDocumentation",
              "src": "1693:298:1",
              "text": " @dev Sets the values for {name} and {symbol}.\n The default value of {decimals} is 18. To select a different value for\n {decimals} you should overload it.\n All two of these values are immutable: they can only be set once during\n construction."
            },
            "id": 302,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 291,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 288,
                  "mutability": "mutable",
                  "name": "name_",
                  "nodeType": "VariableDeclaration",
                  "scope": 302,
                  "src": "2008:19:1",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 287,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "2008:6:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 290,
                  "mutability": "mutable",
                  "name": "symbol_",
                  "nodeType": "VariableDeclaration",
                  "scope": 302,
                  "src": "2029:21:1",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 289,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "2029:6:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2007:44:1"
            },
            "returnParameters": {
              "id": 292,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2052:0:1"
            },
            "scope": 804,
            "src": "1996:120:1",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              1000
            ],
            "body": {
              "id": 311,
              "nodeType": "Block",
              "src": "2250:29:1",
              "statements": [
                {
                  "expression": {
                    "id": 309,
                    "name": "_name",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 283,
                    "src": "2267:5:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "functionReturnParameters": 308,
                  "id": 310,
                  "nodeType": "Return",
                  "src": "2260:12:1"
                }
              ]
            },
            "documentation": {
              "id": 303,
              "nodeType": "StructuredDocumentation",
              "src": "2122:54:1",
              "text": " @dev Returns the name of the token."
            },
            "functionSelector": "06fdde03",
            "id": 312,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "name",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 305,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "2217:8:1"
            },
            "parameters": {
              "id": 304,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2194:2:1"
            },
            "returnParameters": {
              "id": 308,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 307,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 312,
                  "src": "2235:13:1",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 306,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "2235:6:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2234:15:1"
            },
            "scope": 804,
            "src": "2181:98:1",
            "stateMutability": "view",
            "virtual": true,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              1006
            ],
            "body": {
              "id": 321,
              "nodeType": "Block",
              "src": "2463:31:1",
              "statements": [
                {
                  "expression": {
                    "id": 319,
                    "name": "_symbol",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 285,
                    "src": "2480:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "functionReturnParameters": 318,
                  "id": 320,
                  "nodeType": "Return",
                  "src": "2473:14:1"
                }
              ]
            },
            "documentation": {
              "id": 313,
              "nodeType": "StructuredDocumentation",
              "src": "2285:102:1",
              "text": " @dev Returns the symbol of the token, usually a shorter version of the\n name."
            },
            "functionSelector": "95d89b41",
            "id": 322,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "symbol",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 315,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "2430:8:1"
            },
            "parameters": {
              "id": 314,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2407:2:1"
            },
            "returnParameters": {
              "id": 318,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 317,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 322,
                  "src": "2448:13:1",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 316,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "2448:6:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2447:15:1"
            },
            "scope": 804,
            "src": "2392:102:1",
            "stateMutability": "view",
            "virtual": true,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              1012
            ],
            "body": {
              "id": 331,
              "nodeType": "Block",
              "src": "3183:26:1",
              "statements": [
                {
                  "expression": {
                    "hexValue": "3138",
                    "id": 329,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "3200:2:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_18_by_1",
                      "typeString": "int_const 18"
                    },
                    "value": "18"
                  },
                  "functionReturnParameters": 328,
                  "id": 330,
                  "nodeType": "Return",
                  "src": "3193:9:1"
                }
              ]
            },
            "documentation": {
              "id": 323,
              "nodeType": "StructuredDocumentation",
              "src": "2500:613:1",
              "text": " @dev Returns the number of decimals used to get its user representation.\n For example, if `decimals` equals `2`, a balance of `505` tokens should\n be displayed to a user as `5.05` (`505 / 10 ** 2`).\n Tokens usually opt for a value of 18, imitating the relationship between\n Ether and Wei. This is the value {ERC20} uses, unless this function is\n overridden;\n NOTE: This information is only used for _display_ purposes: it in\n no way affects any of the arithmetic of the contract, including\n {IERC20-balanceOf} and {IERC20-transfer}."
            },
            "functionSelector": "313ce567",
            "id": 332,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "decimals",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 325,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "3158:8:1"
            },
            "parameters": {
              "id": 324,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3135:2:1"
            },
            "returnParameters": {
              "id": 328,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 327,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 332,
                  "src": "3176:5:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint8",
                    "typeString": "uint8"
                  },
                  "typeName": {
                    "id": 326,
                    "name": "uint8",
                    "nodeType": "ElementaryTypeName",
                    "src": "3176:5:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint8",
                      "typeString": "uint8"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3175:7:1"
            },
            "scope": 804,
            "src": "3118:91:1",
            "stateMutability": "view",
            "virtual": true,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              917
            ],
            "body": {
              "id": 341,
              "nodeType": "Block",
              "src": "3339:36:1",
              "statements": [
                {
                  "expression": {
                    "id": 339,
                    "name": "_totalSupply",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 281,
                    "src": "3356:12:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 338,
                  "id": 340,
                  "nodeType": "Return",
                  "src": "3349:19:1"
                }
              ]
            },
            "documentation": {
              "id": 333,
              "nodeType": "StructuredDocumentation",
              "src": "3215:49:1",
              "text": " @dev See {IERC20-totalSupply}."
            },
            "functionSelector": "18160ddd",
            "id": 342,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "totalSupply",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 335,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "3312:8:1"
            },
            "parameters": {
              "id": 334,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3289:2:1"
            },
            "returnParameters": {
              "id": 338,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 337,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 342,
                  "src": "3330:7:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 336,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3330:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3329:9:1"
            },
            "scope": 804,
            "src": "3269:106:1",
            "stateMutability": "view",
            "virtual": true,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              925
            ],
            "body": {
              "id": 355,
              "nodeType": "Block",
              "src": "3516:42:1",
              "statements": [
                {
                  "expression": {
                    "baseExpression": {
                      "id": 351,
                      "name": "_balances",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 273,
                      "src": "3533:9:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                        "typeString": "mapping(address => uint256)"
                      }
                    },
                    "id": 353,
                    "indexExpression": {
                      "id": 352,
                      "name": "account",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 345,
                      "src": "3543:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "3533:18:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 350,
                  "id": 354,
                  "nodeType": "Return",
                  "src": "3526:25:1"
                }
              ]
            },
            "documentation": {
              "id": 343,
              "nodeType": "StructuredDocumentation",
              "src": "3381:47:1",
              "text": " @dev See {IERC20-balanceOf}."
            },
            "functionSelector": "70a08231",
            "id": 356,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "balanceOf",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 347,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "3489:8:1"
            },
            "parameters": {
              "id": 346,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 345,
                  "mutability": "mutable",
                  "name": "account",
                  "nodeType": "VariableDeclaration",
                  "scope": 356,
                  "src": "3452:15:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 344,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3452:7:1",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3451:17:1"
            },
            "returnParameters": {
              "id": 350,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 349,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 356,
                  "src": "3507:7:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 348,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3507:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3506:9:1"
            },
            "scope": 804,
            "src": "3433:125:1",
            "stateMutability": "view",
            "virtual": true,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              937
            ],
            "body": {
              "id": 377,
              "nodeType": "Block",
              "src": "3868:73:1",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 370,
                        "name": "_from",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 359,
                        "src": "3888:5:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 371,
                        "name": "recipient",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 361,
                        "src": "3895:9:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 372,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 363,
                        "src": "3906:6:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 369,
                      "name": "_transfer",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 608,
                      "src": "3878:9:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 373,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3878:35:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 374,
                  "nodeType": "ExpressionStatement",
                  "src": "3878:35:1"
                },
                {
                  "expression": {
                    "hexValue": "74727565",
                    "id": 375,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "bool",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "3930:4:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "value": "true"
                  },
                  "functionReturnParameters": 368,
                  "id": 376,
                  "nodeType": "Return",
                  "src": "3923:11:1"
                }
              ]
            },
            "documentation": {
              "id": 357,
              "nodeType": "StructuredDocumentation",
              "src": "3564:192:1",
              "text": " @dev See {IERC20-transfer}.\n Requirements:\n - `recipient` cannot be the zero address.\n - the caller must have a balance of at least `amount`."
            },
            "functionSelector": "beabacc8",
            "id": 378,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "transfer",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 365,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "3844:8:1"
            },
            "parameters": {
              "id": 364,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 359,
                  "mutability": "mutable",
                  "name": "_from",
                  "nodeType": "VariableDeclaration",
                  "scope": 378,
                  "src": "3779:13:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 358,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3779:7:1",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 361,
                  "mutability": "mutable",
                  "name": "recipient",
                  "nodeType": "VariableDeclaration",
                  "scope": 378,
                  "src": "3794:17:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 360,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3794:7:1",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 363,
                  "mutability": "mutable",
                  "name": "amount",
                  "nodeType": "VariableDeclaration",
                  "scope": 378,
                  "src": "3813:14:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 362,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3813:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3778:50:1"
            },
            "returnParameters": {
              "id": 368,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 367,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 378,
                  "src": "3862:4:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 366,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "3862:4:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3861:6:1"
            },
            "scope": 804,
            "src": "3761:180:1",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              947
            ],
            "body": {
              "id": 395,
              "nodeType": "Block",
              "src": "4097:51:1",
              "statements": [
                {
                  "expression": {
                    "baseExpression": {
                      "baseExpression": {
                        "id": 389,
                        "name": "_allowances",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 279,
                        "src": "4114:11:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                          "typeString": "mapping(address => mapping(address => uint256))"
                        }
                      },
                      "id": 391,
                      "indexExpression": {
                        "id": 390,
                        "name": "owner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 381,
                        "src": "4126:5:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "IndexAccess",
                      "src": "4114:18:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                        "typeString": "mapping(address => uint256)"
                      }
                    },
                    "id": 393,
                    "indexExpression": {
                      "id": 392,
                      "name": "spender",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 383,
                      "src": "4133:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "4114:27:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 388,
                  "id": 394,
                  "nodeType": "Return",
                  "src": "4107:34:1"
                }
              ]
            },
            "documentation": {
              "id": 379,
              "nodeType": "StructuredDocumentation",
              "src": "3947:47:1",
              "text": " @dev See {IERC20-allowance}."
            },
            "functionSelector": "dd62ed3e",
            "id": 396,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "allowance",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 385,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "4070:8:1"
            },
            "parameters": {
              "id": 384,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 381,
                  "mutability": "mutable",
                  "name": "owner",
                  "nodeType": "VariableDeclaration",
                  "scope": 396,
                  "src": "4018:13:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 380,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4018:7:1",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 383,
                  "mutability": "mutable",
                  "name": "spender",
                  "nodeType": "VariableDeclaration",
                  "scope": 396,
                  "src": "4033:15:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 382,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4033:7:1",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4017:32:1"
            },
            "returnParameters": {
              "id": 388,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 387,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 396,
                  "src": "4088:7:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 386,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4088:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4087:9:1"
            },
            "scope": 804,
            "src": "3999:149:1",
            "stateMutability": "view",
            "virtual": true,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              957
            ],
            "body": {
              "id": 416,
              "nodeType": "Block",
              "src": "4375:77:1",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 408,
                          "name": "_msgSender",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1025,
                          "src": "4394:10:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                            "typeString": "function () view returns (address)"
                          }
                        },
                        "id": 409,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4394:12:1",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 410,
                        "name": "spender",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 399,
                        "src": "4408:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 411,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 401,
                        "src": "4417:6:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 407,
                      "name": "_approve",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 781,
                      "src": "4385:8:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 412,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4385:39:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 413,
                  "nodeType": "ExpressionStatement",
                  "src": "4385:39:1"
                },
                {
                  "expression": {
                    "hexValue": "74727565",
                    "id": 414,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "bool",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "4441:4:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "value": "true"
                  },
                  "functionReturnParameters": 406,
                  "id": 415,
                  "nodeType": "Return",
                  "src": "4434:11:1"
                }
              ]
            },
            "documentation": {
              "id": 397,
              "nodeType": "StructuredDocumentation",
              "src": "4154:127:1",
              "text": " @dev See {IERC20-approve}.\n Requirements:\n - `spender` cannot be the zero address."
            },
            "functionSelector": "095ea7b3",
            "id": 417,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "approve",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 403,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "4351:8:1"
            },
            "parameters": {
              "id": 402,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 399,
                  "mutability": "mutable",
                  "name": "spender",
                  "nodeType": "VariableDeclaration",
                  "scope": 417,
                  "src": "4303:15:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 398,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4303:7:1",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 401,
                  "mutability": "mutable",
                  "name": "amount",
                  "nodeType": "VariableDeclaration",
                  "scope": 417,
                  "src": "4320:14:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 400,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4320:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4302:33:1"
            },
            "returnParameters": {
              "id": 406,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 405,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 417,
                  "src": "4369:4:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 404,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "4369:4:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4368:6:1"
            },
            "scope": 804,
            "src": "4286:166:1",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              969
            ],
            "body": {
              "id": 464,
              "nodeType": "Block",
              "src": "5061:336:1",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 431,
                        "name": "sender",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 420,
                        "src": "5081:6:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 432,
                        "name": "recipient",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 422,
                        "src": "5089:9:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 433,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 424,
                        "src": "5100:6:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 430,
                      "name": "_transfer",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 608,
                      "src": "5071:9:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 434,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5071:36:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 435,
                  "nodeType": "ExpressionStatement",
                  "src": "5071:36:1"
                },
                {
                  "assignments": [
                    437
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 437,
                      "mutability": "mutable",
                      "name": "currentAllowance",
                      "nodeType": "VariableDeclaration",
                      "scope": 464,
                      "src": "5118:24:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 436,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "5118:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 444,
                  "initialValue": {
                    "baseExpression": {
                      "baseExpression": {
                        "id": 438,
                        "name": "_allowances",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 279,
                        "src": "5145:11:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                          "typeString": "mapping(address => mapping(address => uint256))"
                        }
                      },
                      "id": 440,
                      "indexExpression": {
                        "id": 439,
                        "name": "sender",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 420,
                        "src": "5157:6:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "IndexAccess",
                      "src": "5145:19:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                        "typeString": "mapping(address => uint256)"
                      }
                    },
                    "id": 443,
                    "indexExpression": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 441,
                        "name": "_msgSender",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1025,
                        "src": "5165:10:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                          "typeString": "function () view returns (address)"
                        }
                      },
                      "id": 442,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "5165:12:1",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "5145:33:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "5118:60:1"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 448,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 446,
                          "name": "currentAllowance",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 437,
                          "src": "5196:16:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">=",
                        "rightExpression": {
                          "id": 447,
                          "name": "amount",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 424,
                          "src": "5216:6:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "5196:26:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365",
                        "id": 449,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "5224:42:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_974d1b4421da69cc60b481194f0dad36a5bb4e23da810da7a7fb30cdba178330",
                          "typeString": "literal_string \"ERC20: transfer amount exceeds allowance\""
                        },
                        "value": "ERC20: transfer amount exceeds allowance"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_974d1b4421da69cc60b481194f0dad36a5bb4e23da810da7a7fb30cdba178330",
                          "typeString": "literal_string \"ERC20: transfer amount exceeds allowance\""
                        }
                      ],
                      "id": 445,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "5188:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 450,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5188:79:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 451,
                  "nodeType": "ExpressionStatement",
                  "src": "5188:79:1"
                },
                {
                  "id": 461,
                  "nodeType": "UncheckedBlock",
                  "src": "5277:92:1",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "id": 453,
                            "name": "sender",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 420,
                            "src": "5310:6:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 454,
                              "name": "_msgSender",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1025,
                              "src": "5318:10:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                                "typeString": "function () view returns (address)"
                              }
                            },
                            "id": 455,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "5318:12:1",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 458,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 456,
                              "name": "currentAllowance",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 437,
                              "src": "5332:16:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "-",
                            "rightExpression": {
                              "id": 457,
                              "name": "amount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 424,
                              "src": "5351:6:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "5332:25:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 452,
                          "name": "_approve",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 781,
                          "src": "5301:8:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                            "typeString": "function (address,address,uint256)"
                          }
                        },
                        "id": 459,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "5301:57:1",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 460,
                      "nodeType": "ExpressionStatement",
                      "src": "5301:57:1"
                    }
                  ]
                },
                {
                  "expression": {
                    "hexValue": "74727565",
                    "id": 462,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "bool",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "5386:4:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "value": "true"
                  },
                  "functionReturnParameters": 429,
                  "id": 463,
                  "nodeType": "Return",
                  "src": "5379:11:1"
                }
              ]
            },
            "documentation": {
              "id": 418,
              "nodeType": "StructuredDocumentation",
              "src": "4458:456:1",
              "text": " @dev See {IERC20-transferFrom}.\n Emits an {Approval} event indicating the updated allowance. This is not\n required by the EIP. See the note at the beginning of {ERC20}.\n Requirements:\n - `sender` and `recipient` cannot be the zero address.\n - `sender` must have a balance of at least `amount`.\n - the caller must have allowance for ``sender``'s tokens of at least\n `amount`."
            },
            "functionSelector": "23b872dd",
            "id": 465,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "transferFrom",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 426,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "5037:8:1"
            },
            "parameters": {
              "id": 425,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 420,
                  "mutability": "mutable",
                  "name": "sender",
                  "nodeType": "VariableDeclaration",
                  "scope": 465,
                  "src": "4950:14:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 419,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4950:7:1",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 422,
                  "mutability": "mutable",
                  "name": "recipient",
                  "nodeType": "VariableDeclaration",
                  "scope": 465,
                  "src": "4974:17:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 421,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4974:7:1",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 424,
                  "mutability": "mutable",
                  "name": "amount",
                  "nodeType": "VariableDeclaration",
                  "scope": 465,
                  "src": "5001:14:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 423,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5001:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4940:81:1"
            },
            "returnParameters": {
              "id": 429,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 428,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 465,
                  "src": "5055:4:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 427,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "5055:4:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5054:6:1"
            },
            "scope": 804,
            "src": "4919:478:1",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "public"
          },
          {
            "body": {
              "id": 491,
              "nodeType": "Block",
              "src": "5886:118:1",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 476,
                          "name": "_msgSender",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1025,
                          "src": "5905:10:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                            "typeString": "function () view returns (address)"
                          }
                        },
                        "id": 477,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "5905:12:1",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 478,
                        "name": "spender",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 468,
                        "src": "5919:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 486,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "baseExpression": {
                            "baseExpression": {
                              "id": 479,
                              "name": "_allowances",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 279,
                              "src": "5928:11:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                                "typeString": "mapping(address => mapping(address => uint256))"
                              }
                            },
                            "id": 482,
                            "indexExpression": {
                              "arguments": [],
                              "expression": {
                                "argumentTypes": [],
                                "id": 480,
                                "name": "_msgSender",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1025,
                                "src": "5940:10:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                                  "typeString": "function () view returns (address)"
                                }
                              },
                              "id": 481,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "5940:12:1",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "5928:25:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                              "typeString": "mapping(address => uint256)"
                            }
                          },
                          "id": 484,
                          "indexExpression": {
                            "id": 483,
                            "name": "spender",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 468,
                            "src": "5954:7:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "5928:34:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "+",
                        "rightExpression": {
                          "id": 485,
                          "name": "addedValue",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 470,
                          "src": "5965:10:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "5928:47:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 475,
                      "name": "_approve",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 781,
                      "src": "5896:8:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 487,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5896:80:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 488,
                  "nodeType": "ExpressionStatement",
                  "src": "5896:80:1"
                },
                {
                  "expression": {
                    "hexValue": "74727565",
                    "id": 489,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "bool",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "5993:4:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "value": "true"
                  },
                  "functionReturnParameters": 474,
                  "id": 490,
                  "nodeType": "Return",
                  "src": "5986:11:1"
                }
              ]
            },
            "documentation": {
              "id": 466,
              "nodeType": "StructuredDocumentation",
              "src": "5403:384:1",
              "text": " @dev Atomically increases the allowance granted to `spender` by the caller.\n This is an alternative to {approve} that can be used as a mitigation for\n problems described in {IERC20-approve}.\n Emits an {Approval} event indicating the updated allowance.\n Requirements:\n - `spender` cannot be the zero address."
            },
            "functionSelector": "39509351",
            "id": 492,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "increaseAllowance",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 471,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 468,
                  "mutability": "mutable",
                  "name": "spender",
                  "nodeType": "VariableDeclaration",
                  "scope": 492,
                  "src": "5819:15:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 467,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "5819:7:1",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 470,
                  "mutability": "mutable",
                  "name": "addedValue",
                  "nodeType": "VariableDeclaration",
                  "scope": 492,
                  "src": "5836:18:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 469,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5836:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5818:37:1"
            },
            "returnParameters": {
              "id": 474,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 473,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 492,
                  "src": "5880:4:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 472,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "5880:4:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5879:6:1"
            },
            "scope": 804,
            "src": "5792:212:1",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "public"
          },
          {
            "body": {
              "id": 530,
              "nodeType": "Block",
              "src": "6590:306:1",
              "statements": [
                {
                  "assignments": [
                    503
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 503,
                      "mutability": "mutable",
                      "name": "currentAllowance",
                      "nodeType": "VariableDeclaration",
                      "scope": 530,
                      "src": "6600:24:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 502,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "6600:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 510,
                  "initialValue": {
                    "baseExpression": {
                      "baseExpression": {
                        "id": 504,
                        "name": "_allowances",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 279,
                        "src": "6627:11:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                          "typeString": "mapping(address => mapping(address => uint256))"
                        }
                      },
                      "id": 507,
                      "indexExpression": {
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 505,
                          "name": "_msgSender",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1025,
                          "src": "6639:10:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                            "typeString": "function () view returns (address)"
                          }
                        },
                        "id": 506,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "6639:12:1",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "IndexAccess",
                      "src": "6627:25:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                        "typeString": "mapping(address => uint256)"
                      }
                    },
                    "id": 509,
                    "indexExpression": {
                      "id": 508,
                      "name": "spender",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 495,
                      "src": "6653:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "6627:34:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "6600:61:1"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 514,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 512,
                          "name": "currentAllowance",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 503,
                          "src": "6679:16:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">=",
                        "rightExpression": {
                          "id": 513,
                          "name": "subtractedValue",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 497,
                          "src": "6699:15:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "6679:35:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f",
                        "id": 515,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6716:39:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8",
                          "typeString": "literal_string \"ERC20: decreased allowance below zero\""
                        },
                        "value": "ERC20: decreased allowance below zero"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8",
                          "typeString": "literal_string \"ERC20: decreased allowance below zero\""
                        }
                      ],
                      "id": 511,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "6671:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 516,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6671:85:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 517,
                  "nodeType": "ExpressionStatement",
                  "src": "6671:85:1"
                },
                {
                  "id": 527,
                  "nodeType": "UncheckedBlock",
                  "src": "6766:102:1",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 519,
                              "name": "_msgSender",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1025,
                              "src": "6799:10:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                                "typeString": "function () view returns (address)"
                              }
                            },
                            "id": 520,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "6799:12:1",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 521,
                            "name": "spender",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 495,
                            "src": "6813:7:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 524,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 522,
                              "name": "currentAllowance",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 503,
                              "src": "6822:16:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "-",
                            "rightExpression": {
                              "id": 523,
                              "name": "subtractedValue",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 497,
                              "src": "6841:15:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "6822:34:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 518,
                          "name": "_approve",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 781,
                          "src": "6790:8:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                            "typeString": "function (address,address,uint256)"
                          }
                        },
                        "id": 525,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "6790:67:1",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 526,
                      "nodeType": "ExpressionStatement",
                      "src": "6790:67:1"
                    }
                  ]
                },
                {
                  "expression": {
                    "hexValue": "74727565",
                    "id": 528,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "bool",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "6885:4:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "value": "true"
                  },
                  "functionReturnParameters": 501,
                  "id": 529,
                  "nodeType": "Return",
                  "src": "6878:11:1"
                }
              ]
            },
            "documentation": {
              "id": 493,
              "nodeType": "StructuredDocumentation",
              "src": "6010:476:1",
              "text": " @dev Atomically decreases the allowance granted to `spender` by the caller.\n This is an alternative to {approve} that can be used as a mitigation for\n problems described in {IERC20-approve}.\n Emits an {Approval} event indicating the updated allowance.\n Requirements:\n - `spender` cannot be the zero address.\n - `spender` must have allowance for the caller of at least\n `subtractedValue`."
            },
            "functionSelector": "a457c2d7",
            "id": 531,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "decreaseAllowance",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 498,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 495,
                  "mutability": "mutable",
                  "name": "spender",
                  "nodeType": "VariableDeclaration",
                  "scope": 531,
                  "src": "6518:15:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 494,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "6518:7:1",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 497,
                  "mutability": "mutable",
                  "name": "subtractedValue",
                  "nodeType": "VariableDeclaration",
                  "scope": 531,
                  "src": "6535:23:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 496,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "6535:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6517:42:1"
            },
            "returnParameters": {
              "id": 501,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 500,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 531,
                  "src": "6584:4:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 499,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "6584:4:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6583:6:1"
            },
            "scope": 804,
            "src": "6491:405:1",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "public"
          },
          {
            "body": {
              "id": 607,
              "nodeType": "Block",
              "src": "7487:596:1",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 547,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 542,
                          "name": "sender",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 534,
                          "src": "7505:6:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "arguments": [
                            {
                              "hexValue": "30",
                              "id": 545,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "7523:1:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 544,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "7515:7:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 543,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "7515:7:1",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 546,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "7515:10:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "7505:20:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "45524332303a207472616e736665722066726f6d20746865207a65726f2061646472657373",
                        "id": 548,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "7527:39:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea",
                          "typeString": "literal_string \"ERC20: transfer from the zero address\""
                        },
                        "value": "ERC20: transfer from the zero address"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea",
                          "typeString": "literal_string \"ERC20: transfer from the zero address\""
                        }
                      ],
                      "id": 541,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "7497:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 549,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7497:70:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 550,
                  "nodeType": "ExpressionStatement",
                  "src": "7497:70:1"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 557,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 552,
                          "name": "recipient",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 536,
                          "src": "7585:9:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "arguments": [
                            {
                              "hexValue": "30",
                              "id": 555,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "7606:1:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 554,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "7598:7:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 553,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "7598:7:1",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 556,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "7598:10:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "7585:23:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "45524332303a207472616e7366657220746f20746865207a65726f2061646472657373",
                        "id": 558,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "7610:37:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f",
                          "typeString": "literal_string \"ERC20: transfer to the zero address\""
                        },
                        "value": "ERC20: transfer to the zero address"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f",
                          "typeString": "literal_string \"ERC20: transfer to the zero address\""
                        }
                      ],
                      "id": 551,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "7577:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 559,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7577:71:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 560,
                  "nodeType": "ExpressionStatement",
                  "src": "7577:71:1"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 562,
                        "name": "sender",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 534,
                        "src": "7680:6:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 563,
                        "name": "recipient",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 536,
                        "src": "7688:9:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 564,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 538,
                        "src": "7699:6:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 561,
                      "name": "_beforeTokenTransfer",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 792,
                      "src": "7659:20:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 565,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7659:47:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 566,
                  "nodeType": "ExpressionStatement",
                  "src": "7659:47:1"
                },
                {
                  "assignments": [
                    568
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 568,
                      "mutability": "mutable",
                      "name": "senderBalance",
                      "nodeType": "VariableDeclaration",
                      "scope": 607,
                      "src": "7717:21:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 567,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "7717:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 572,
                  "initialValue": {
                    "baseExpression": {
                      "id": 569,
                      "name": "_balances",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 273,
                      "src": "7741:9:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                        "typeString": "mapping(address => uint256)"
                      }
                    },
                    "id": 571,
                    "indexExpression": {
                      "id": 570,
                      "name": "sender",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 534,
                      "src": "7751:6:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "7741:17:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "7717:41:1"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 576,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 574,
                          "name": "senderBalance",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 568,
                          "src": "7776:13:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">=",
                        "rightExpression": {
                          "id": 575,
                          "name": "amount",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 538,
                          "src": "7793:6:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "7776:23:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e6365",
                        "id": 577,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "7801:40:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6",
                          "typeString": "literal_string \"ERC20: transfer amount exceeds balance\""
                        },
                        "value": "ERC20: transfer amount exceeds balance"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6",
                          "typeString": "literal_string \"ERC20: transfer amount exceeds balance\""
                        }
                      ],
                      "id": 573,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "7768:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 578,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7768:74:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 579,
                  "nodeType": "ExpressionStatement",
                  "src": "7768:74:1"
                },
                {
                  "id": 588,
                  "nodeType": "UncheckedBlock",
                  "src": "7852:77:1",
                  "statements": [
                    {
                      "expression": {
                        "id": 586,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "baseExpression": {
                            "id": 580,
                            "name": "_balances",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 273,
                            "src": "7876:9:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                              "typeString": "mapping(address => uint256)"
                            }
                          },
                          "id": 582,
                          "indexExpression": {
                            "id": 581,
                            "name": "sender",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 534,
                            "src": "7886:6:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": true,
                          "nodeType": "IndexAccess",
                          "src": "7876:17:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 585,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 583,
                            "name": "senderBalance",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 568,
                            "src": "7896:13:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "-",
                          "rightExpression": {
                            "id": 584,
                            "name": "amount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 538,
                            "src": "7912:6:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "7896:22:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "7876:42:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 587,
                      "nodeType": "ExpressionStatement",
                      "src": "7876:42:1"
                    }
                  ]
                },
                {
                  "expression": {
                    "id": 593,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 589,
                        "name": "_balances",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 273,
                        "src": "7938:9:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                          "typeString": "mapping(address => uint256)"
                        }
                      },
                      "id": 591,
                      "indexExpression": {
                        "id": 590,
                        "name": "recipient",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 536,
                        "src": "7948:9:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "7938:20:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "+=",
                    "rightHandSide": {
                      "id": 592,
                      "name": "amount",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 538,
                      "src": "7962:6:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "7938:30:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 594,
                  "nodeType": "ExpressionStatement",
                  "src": "7938:30:1"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 596,
                        "name": "sender",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 534,
                        "src": "7993:6:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 597,
                        "name": "recipient",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 536,
                        "src": "8001:9:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 598,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 538,
                        "src": "8012:6:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 595,
                      "name": "Transfer",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 978,
                      "src": "7984:8:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 599,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7984:35:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 600,
                  "nodeType": "EmitStatement",
                  "src": "7979:40:1"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 602,
                        "name": "sender",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 534,
                        "src": "8050:6:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 603,
                        "name": "recipient",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 536,
                        "src": "8058:9:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 604,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 538,
                        "src": "8069:6:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 601,
                      "name": "_afterTokenTransfer",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 803,
                      "src": "8030:19:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 605,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "8030:46:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 606,
                  "nodeType": "ExpressionStatement",
                  "src": "8030:46:1"
                }
              ]
            },
            "documentation": {
              "id": 532,
              "nodeType": "StructuredDocumentation",
              "src": "6902:463:1",
              "text": " @dev Moves `amount` of tokens from `sender` to `recipient`.\n This internal function is equivalent to {transfer}, and can be used to\n e.g. implement automatic token fees, slashing mechanisms, etc.\n Emits a {Transfer} event.\n Requirements:\n - `sender` cannot be the zero address.\n - `recipient` cannot be the zero address.\n - `sender` must have a balance of at least `amount`."
            },
            "id": 608,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_transfer",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 539,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 534,
                  "mutability": "mutable",
                  "name": "sender",
                  "nodeType": "VariableDeclaration",
                  "scope": 608,
                  "src": "7398:14:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 533,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "7398:7:1",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 536,
                  "mutability": "mutable",
                  "name": "recipient",
                  "nodeType": "VariableDeclaration",
                  "scope": 608,
                  "src": "7422:17:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 535,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "7422:7:1",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 538,
                  "mutability": "mutable",
                  "name": "amount",
                  "nodeType": "VariableDeclaration",
                  "scope": 608,
                  "src": "7449:14:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 537,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "7449:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7388:81:1"
            },
            "returnParameters": {
              "id": 540,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "7487:0:1"
            },
            "scope": 804,
            "src": "7370:713:1",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 663,
              "nodeType": "Block",
              "src": "8424:324:1",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 622,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 617,
                          "name": "account",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 611,
                          "src": "8442:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "arguments": [
                            {
                              "hexValue": "30",
                              "id": 620,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "8461:1:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 619,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "8453:7:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 618,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "8453:7:1",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 621,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "8453:10:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "8442:21:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "45524332303a206d696e7420746f20746865207a65726f2061646472657373",
                        "id": 623,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "8465:33:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e",
                          "typeString": "literal_string \"ERC20: mint to the zero address\""
                        },
                        "value": "ERC20: mint to the zero address"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e",
                          "typeString": "literal_string \"ERC20: mint to the zero address\""
                        }
                      ],
                      "id": 616,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "8434:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 624,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "8434:65:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 625,
                  "nodeType": "ExpressionStatement",
                  "src": "8434:65:1"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "hexValue": "30",
                            "id": 629,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "8539:1:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            }
                          ],
                          "id": 628,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "8531:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 627,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "8531:7:1",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 630,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "8531:10:1",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 631,
                        "name": "account",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 611,
                        "src": "8543:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 632,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 613,
                        "src": "8552:6:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 626,
                      "name": "_beforeTokenTransfer",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 792,
                      "src": "8510:20:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 633,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "8510:49:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 634,
                  "nodeType": "ExpressionStatement",
                  "src": "8510:49:1"
                },
                {
                  "expression": {
                    "id": 637,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 635,
                      "name": "_totalSupply",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 281,
                      "src": "8570:12:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "+=",
                    "rightHandSide": {
                      "id": 636,
                      "name": "amount",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 613,
                      "src": "8586:6:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "8570:22:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 638,
                  "nodeType": "ExpressionStatement",
                  "src": "8570:22:1"
                },
                {
                  "expression": {
                    "id": 643,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 639,
                        "name": "_balances",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 273,
                        "src": "8602:9:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                          "typeString": "mapping(address => uint256)"
                        }
                      },
                      "id": 641,
                      "indexExpression": {
                        "id": 640,
                        "name": "account",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 611,
                        "src": "8612:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "8602:18:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "+=",
                    "rightHandSide": {
                      "id": 642,
                      "name": "amount",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 613,
                      "src": "8624:6:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "8602:28:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 644,
                  "nodeType": "ExpressionStatement",
                  "src": "8602:28:1"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "hexValue": "30",
                            "id": 648,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "8662:1:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            }
                          ],
                          "id": 647,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "8654:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 646,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "8654:7:1",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 649,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "8654:10:1",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 650,
                        "name": "account",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 611,
                        "src": "8666:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 651,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 613,
                        "src": "8675:6:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 645,
                      "name": "Transfer",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 978,
                      "src": "8645:8:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 652,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "8645:37:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 653,
                  "nodeType": "EmitStatement",
                  "src": "8640:42:1"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "hexValue": "30",
                            "id": 657,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "8721:1:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            }
                          ],
                          "id": 656,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "8713:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 655,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "8713:7:1",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 658,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "8713:10:1",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 659,
                        "name": "account",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 611,
                        "src": "8725:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 660,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 613,
                        "src": "8734:6:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 654,
                      "name": "_afterTokenTransfer",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 803,
                      "src": "8693:19:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 661,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "8693:48:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 662,
                  "nodeType": "ExpressionStatement",
                  "src": "8693:48:1"
                }
              ]
            },
            "documentation": {
              "id": 609,
              "nodeType": "StructuredDocumentation",
              "src": "8089:265:1",
              "text": "@dev Creates `amount` tokens and assigns them to `account`, increasing\n the total supply.\n Emits a {Transfer} event with `from` set to the zero address.\n Requirements:\n - `account` cannot be the zero address."
            },
            "id": 664,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_mint",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 614,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 611,
                  "mutability": "mutable",
                  "name": "account",
                  "nodeType": "VariableDeclaration",
                  "scope": 664,
                  "src": "8374:15:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 610,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "8374:7:1",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 613,
                  "mutability": "mutable",
                  "name": "amount",
                  "nodeType": "VariableDeclaration",
                  "scope": 664,
                  "src": "8391:14:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 612,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "8391:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8373:33:1"
            },
            "returnParameters": {
              "id": 615,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "8424:0:1"
            },
            "scope": 804,
            "src": "8359:389:1",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 735,
              "nodeType": "Block",
              "src": "9133:511:1",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 678,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 673,
                          "name": "account",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 667,
                          "src": "9151:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "arguments": [
                            {
                              "hexValue": "30",
                              "id": 676,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "9170:1:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 675,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "9162:7:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 674,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "9162:7:1",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 677,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "9162:10:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "9151:21:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "45524332303a206275726e2066726f6d20746865207a65726f2061646472657373",
                        "id": 679,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "9174:35:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f",
                          "typeString": "literal_string \"ERC20: burn from the zero address\""
                        },
                        "value": "ERC20: burn from the zero address"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f",
                          "typeString": "literal_string \"ERC20: burn from the zero address\""
                        }
                      ],
                      "id": 672,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "9143:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 680,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "9143:67:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 681,
                  "nodeType": "ExpressionStatement",
                  "src": "9143:67:1"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 683,
                        "name": "account",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 667,
                        "src": "9242:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "arguments": [
                          {
                            "hexValue": "30",
                            "id": 686,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "9259:1:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            }
                          ],
                          "id": 685,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "9251:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 684,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "9251:7:1",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 687,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "9251:10:1",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 688,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 669,
                        "src": "9263:6:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 682,
                      "name": "_beforeTokenTransfer",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 792,
                      "src": "9221:20:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 689,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "9221:49:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 690,
                  "nodeType": "ExpressionStatement",
                  "src": "9221:49:1"
                },
                {
                  "assignments": [
                    692
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 692,
                      "mutability": "mutable",
                      "name": "accountBalance",
                      "nodeType": "VariableDeclaration",
                      "scope": 735,
                      "src": "9281:22:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 691,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "9281:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 696,
                  "initialValue": {
                    "baseExpression": {
                      "id": 693,
                      "name": "_balances",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 273,
                      "src": "9306:9:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                        "typeString": "mapping(address => uint256)"
                      }
                    },
                    "id": 695,
                    "indexExpression": {
                      "id": 694,
                      "name": "account",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 667,
                      "src": "9316:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "9306:18:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "9281:43:1"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 700,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 698,
                          "name": "accountBalance",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 692,
                          "src": "9342:14:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">=",
                        "rightExpression": {
                          "id": 699,
                          "name": "amount",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 669,
                          "src": "9360:6:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "9342:24:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "45524332303a206275726e20616d6f756e7420657863656564732062616c616e6365",
                        "id": 701,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "9368:36:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd",
                          "typeString": "literal_string \"ERC20: burn amount exceeds balance\""
                        },
                        "value": "ERC20: burn amount exceeds balance"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd",
                          "typeString": "literal_string \"ERC20: burn amount exceeds balance\""
                        }
                      ],
                      "id": 697,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "9334:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 702,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "9334:71:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 703,
                  "nodeType": "ExpressionStatement",
                  "src": "9334:71:1"
                },
                {
                  "id": 712,
                  "nodeType": "UncheckedBlock",
                  "src": "9415:79:1",
                  "statements": [
                    {
                      "expression": {
                        "id": 710,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "baseExpression": {
                            "id": 704,
                            "name": "_balances",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 273,
                            "src": "9439:9:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                              "typeString": "mapping(address => uint256)"
                            }
                          },
                          "id": 706,
                          "indexExpression": {
                            "id": 705,
                            "name": "account",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 667,
                            "src": "9449:7:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": true,
                          "nodeType": "IndexAccess",
                          "src": "9439:18:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 709,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 707,
                            "name": "accountBalance",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 692,
                            "src": "9460:14:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "-",
                          "rightExpression": {
                            "id": 708,
                            "name": "amount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 669,
                            "src": "9477:6:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "9460:23:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "9439:44:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 711,
                      "nodeType": "ExpressionStatement",
                      "src": "9439:44:1"
                    }
                  ]
                },
                {
                  "expression": {
                    "id": 715,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 713,
                      "name": "_totalSupply",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 281,
                      "src": "9503:12:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "-=",
                    "rightHandSide": {
                      "id": 714,
                      "name": "amount",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 669,
                      "src": "9519:6:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "9503:22:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 716,
                  "nodeType": "ExpressionStatement",
                  "src": "9503:22:1"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 718,
                        "name": "account",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 667,
                        "src": "9550:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "arguments": [
                          {
                            "hexValue": "30",
                            "id": 721,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "9567:1:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            }
                          ],
                          "id": 720,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "9559:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 719,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "9559:7:1",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 722,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "9559:10:1",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 723,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 669,
                        "src": "9571:6:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 717,
                      "name": "Transfer",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 978,
                      "src": "9541:8:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 724,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "9541:37:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 725,
                  "nodeType": "EmitStatement",
                  "src": "9536:42:1"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 727,
                        "name": "account",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 667,
                        "src": "9609:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "arguments": [
                          {
                            "hexValue": "30",
                            "id": 730,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "9626:1:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            }
                          ],
                          "id": 729,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "9618:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 728,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "9618:7:1",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 731,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "9618:10:1",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 732,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 669,
                        "src": "9630:6:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 726,
                      "name": "_afterTokenTransfer",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 803,
                      "src": "9589:19:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 733,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "9589:48:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 734,
                  "nodeType": "ExpressionStatement",
                  "src": "9589:48:1"
                }
              ]
            },
            "documentation": {
              "id": 665,
              "nodeType": "StructuredDocumentation",
              "src": "8754:309:1",
              "text": " @dev Destroys `amount` tokens from `account`, reducing the\n total supply.\n Emits a {Transfer} event with `to` set to the zero address.\n Requirements:\n - `account` cannot be the zero address.\n - `account` must have at least `amount` tokens."
            },
            "id": 736,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_burn",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 670,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 667,
                  "mutability": "mutable",
                  "name": "account",
                  "nodeType": "VariableDeclaration",
                  "scope": 736,
                  "src": "9083:15:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 666,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "9083:7:1",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 669,
                  "mutability": "mutable",
                  "name": "amount",
                  "nodeType": "VariableDeclaration",
                  "scope": 736,
                  "src": "9100:14:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 668,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "9100:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "9082:33:1"
            },
            "returnParameters": {
              "id": 671,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "9133:0:1"
            },
            "scope": 804,
            "src": "9068:576:1",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 780,
              "nodeType": "Block",
              "src": "10180:257:1",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 752,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 747,
                          "name": "owner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 739,
                          "src": "10198:5:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "arguments": [
                            {
                              "hexValue": "30",
                              "id": 750,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "10215:1:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 749,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "10207:7:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 748,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "10207:7:1",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 751,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "10207:10:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "10198:19:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "45524332303a20617070726f76652066726f6d20746865207a65726f2061646472657373",
                        "id": 753,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "10219:38:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208",
                          "typeString": "literal_string \"ERC20: approve from the zero address\""
                        },
                        "value": "ERC20: approve from the zero address"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208",
                          "typeString": "literal_string \"ERC20: approve from the zero address\""
                        }
                      ],
                      "id": 746,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "10190:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 754,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "10190:68:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 755,
                  "nodeType": "ExpressionStatement",
                  "src": "10190:68:1"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 762,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 757,
                          "name": "spender",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 741,
                          "src": "10276:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "arguments": [
                            {
                              "hexValue": "30",
                              "id": 760,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "10295:1:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 759,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "10287:7:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 758,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "10287:7:1",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 761,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "10287:10:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "10276:21:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "45524332303a20617070726f766520746f20746865207a65726f2061646472657373",
                        "id": 763,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "10299:36:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029",
                          "typeString": "literal_string \"ERC20: approve to the zero address\""
                        },
                        "value": "ERC20: approve to the zero address"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029",
                          "typeString": "literal_string \"ERC20: approve to the zero address\""
                        }
                      ],
                      "id": 756,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "10268:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 764,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "10268:68:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 765,
                  "nodeType": "ExpressionStatement",
                  "src": "10268:68:1"
                },
                {
                  "expression": {
                    "id": 772,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "baseExpression": {
                          "id": 766,
                          "name": "_allowances",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 279,
                          "src": "10347:11:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                            "typeString": "mapping(address => mapping(address => uint256))"
                          }
                        },
                        "id": 769,
                        "indexExpression": {
                          "id": 767,
                          "name": "owner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 739,
                          "src": "10359:5:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "10347:18:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                          "typeString": "mapping(address => uint256)"
                        }
                      },
                      "id": 770,
                      "indexExpression": {
                        "id": 768,
                        "name": "spender",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 741,
                        "src": "10366:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "10347:27:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 771,
                      "name": "amount",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 743,
                      "src": "10377:6:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "10347:36:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 773,
                  "nodeType": "ExpressionStatement",
                  "src": "10347:36:1"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 775,
                        "name": "owner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 739,
                        "src": "10407:5:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 776,
                        "name": "spender",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 741,
                        "src": "10414:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 777,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 743,
                        "src": "10423:6:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 774,
                      "name": "Approval",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 987,
                      "src": "10398:8:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 778,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "10398:32:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 779,
                  "nodeType": "EmitStatement",
                  "src": "10393:37:1"
                }
              ]
            },
            "documentation": {
              "id": 737,
              "nodeType": "StructuredDocumentation",
              "src": "9650:412:1",
              "text": " @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n This internal function is equivalent to `approve`, and can be used to\n e.g. set automatic allowances for certain subsystems, etc.\n Emits an {Approval} event.\n Requirements:\n - `owner` cannot be the zero address.\n - `spender` cannot be the zero address."
            },
            "id": 781,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_approve",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 744,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 739,
                  "mutability": "mutable",
                  "name": "owner",
                  "nodeType": "VariableDeclaration",
                  "scope": 781,
                  "src": "10094:13:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 738,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "10094:7:1",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 741,
                  "mutability": "mutable",
                  "name": "spender",
                  "nodeType": "VariableDeclaration",
                  "scope": 781,
                  "src": "10117:15:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 740,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "10117:7:1",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 743,
                  "mutability": "mutable",
                  "name": "amount",
                  "nodeType": "VariableDeclaration",
                  "scope": 781,
                  "src": "10142:14:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 742,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "10142:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "10084:78:1"
            },
            "returnParameters": {
              "id": 745,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "10180:0:1"
            },
            "scope": 804,
            "src": "10067:370:1",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 791,
              "nodeType": "Block",
              "src": "11140:2:1",
              "statements": []
            },
            "documentation": {
              "id": 782,
              "nodeType": "StructuredDocumentation",
              "src": "10443:573:1",
              "text": " @dev Hook that is called before any transfer of tokens. This includes\n minting and burning.\n Calling conditions:\n - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n will be transferred to `to`.\n - when `from` is zero, `amount` tokens will be minted for `to`.\n - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n - `from` and `to` are never both zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."
            },
            "id": 792,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_beforeTokenTransfer",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 789,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 784,
                  "mutability": "mutable",
                  "name": "from",
                  "nodeType": "VariableDeclaration",
                  "scope": 792,
                  "src": "11060:12:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 783,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "11060:7:1",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 786,
                  "mutability": "mutable",
                  "name": "to",
                  "nodeType": "VariableDeclaration",
                  "scope": 792,
                  "src": "11082:10:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 785,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "11082:7:1",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 788,
                  "mutability": "mutable",
                  "name": "amount",
                  "nodeType": "VariableDeclaration",
                  "scope": 792,
                  "src": "11102:14:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 787,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "11102:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "11050:72:1"
            },
            "returnParameters": {
              "id": 790,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "11140:0:1"
            },
            "scope": 804,
            "src": "11021:121:1",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 802,
              "nodeType": "Block",
              "src": "11848:2:1",
              "statements": []
            },
            "documentation": {
              "id": 793,
              "nodeType": "StructuredDocumentation",
              "src": "11148:577:1",
              "text": " @dev Hook that is called after any transfer of tokens. This includes\n minting and burning.\n Calling conditions:\n - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n has been transferred to `to`.\n - when `from` is zero, `amount` tokens have been minted for `to`.\n - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n - `from` and `to` are never both zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."
            },
            "id": 803,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_afterTokenTransfer",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 800,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 795,
                  "mutability": "mutable",
                  "name": "from",
                  "nodeType": "VariableDeclaration",
                  "scope": 803,
                  "src": "11768:12:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 794,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "11768:7:1",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 797,
                  "mutability": "mutable",
                  "name": "to",
                  "nodeType": "VariableDeclaration",
                  "scope": 803,
                  "src": "11790:10:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 796,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "11790:7:1",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 799,
                  "mutability": "mutable",
                  "name": "amount",
                  "nodeType": "VariableDeclaration",
                  "scope": 803,
                  "src": "11810:14:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 798,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "11810:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "11758:72:1"
            },
            "returnParameters": {
              "id": 801,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "11848:0:1"
            },
            "scope": 804,
            "src": "11730:120:1",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "internal"
          }
        ],
        "scope": 805,
        "src": "1417:10435:1"
      }
    ],
    "src": "33:11820:1"
  },
  "bytecode": "60806040523480156200001157600080fd5b5060405162000c3938038062000c398339810160408190526200003491620001b9565b81516200004990600390602085019062000068565b5080516200005f90600490602084019062000068565b50505062000273565b828054620000769062000220565b90600052602060002090601f0160209004810192826200009a5760008555620000e5565b82601f10620000b557805160ff1916838001178555620000e5565b82800160010185558215620000e5579182015b82811115620000e5578251825591602001919060010190620000c8565b50620000f3929150620000f7565b5090565b5b80821115620000f35760008155600101620000f8565b600082601f8301126200011f578081fd5b81516001600160401b03808211156200013c576200013c6200025d565b6040516020601f8401601f19168201810183811183821017156200016457620001646200025d565b60405283825285840181018710156200017b578485fd5b8492505b838310156200019e57858301810151828401820152918201916200017f565b83831115620001af57848185840101525b5095945050505050565b60008060408385031215620001cc578182fd5b82516001600160401b0380821115620001e3578384fd5b620001f1868387016200010e565b9350602085015191508082111562000207578283fd5b5062000216858286016200010e565b9150509250929050565b6002810460018216806200023557607f821691505b602082108114156200025757634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b6109b680620002836000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461012957806370a082311461013c57806395d89b411461014f578063a457c2d714610157578063beabacc81461016a578063dd62ed3e1461017d576100a9565b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100ec57806323b872dd14610101578063313ce56714610114575b600080fd5b6100b6610190565b6040516100c391906106d6565b60405180910390f35b6100df6100da3660046106a2565b610222565b6040516100c391906106cb565b6100f461023f565b6040516100c3919061090a565b6100df61010f366004610667565b610245565b61011c6102de565b6040516100c39190610913565b6100df6101373660046106a2565b6102e3565b6100f461014a366004610614565b610337565b6100b6610356565b6100df6101653660046106a2565b610365565b6100df610178366004610667565b6103de565b6100f461018b366004610635565b6103eb565b60606003805461019f90610945565b80601f01602080910402602001604051908101604052809291908181526020018280546101cb90610945565b80156102185780601f106101ed57610100808354040283529160200191610218565b820191906000526020600020905b8154815290600101906020018083116101fb57829003601f168201915b5050505050905090565b600061023661022f610416565b848461041a565b50600192915050565b60025490565b60006102528484846104ce565b6001600160a01b038416600090815260016020526040812081610273610416565b6001600160a01b03166001600160a01b03168152602001908152602001600020549050828110156102bf5760405162461bcd60e51b81526004016102b6906107f4565b60405180910390fd5b6102d3856102cb610416565b85840361041a565b506001949350505050565b601290565b60006102366102f0610416565b8484600160006102fe610416565b6001600160a01b03908116825260208083019390935260409182016000908120918b16815292529020546103329190610921565b61041a565b6001600160a01b0381166000908152602081905260409020545b919050565b60606004805461019f90610945565b60008060016000610374610416565b6001600160a01b03908116825260208083019390935260409182016000908120918816815292529020549050828110156103c05760405162461bcd60e51b81526004016102b6906108c5565b6103d46103cb610416565b8585840361041a565b5060019392505050565b60006103d48484846104ce565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b3390565b6001600160a01b0383166104405760405162461bcd60e51b81526004016102b690610881565b6001600160a01b0382166104665760405162461bcd60e51b81526004016102b69061076c565b6001600160a01b0380841660008181526001602090815260408083209487168084529490915290819020849055517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906104c190859061090a565b60405180910390a3505050565b6001600160a01b0383166104f45760405162461bcd60e51b81526004016102b69061083c565b6001600160a01b03821661051a5760405162461bcd60e51b81526004016102b690610729565b6105258383836105f8565b6001600160a01b0383166000908152602081905260409020548181101561055e5760405162461bcd60e51b81526004016102b6906107ae565b6001600160a01b03808516600090815260208190526040808220858503905591851681529081208054849290610595908490610921565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516105df919061090a565b60405180910390a36105f28484846105f8565b50505050565b505050565b80356001600160a01b038116811461035157600080fd5b600060208284031215610625578081fd5b61062e826105fd565b9392505050565b60008060408385031215610647578081fd5b610650836105fd565b915061065e602084016105fd565b90509250929050565b60008060006060848603121561067b578081fd5b610684846105fd565b9250610692602085016105fd565b9150604084013590509250925092565b600080604083850312156106b4578182fd5b6106bd836105fd565b946020939093013593505050565b901515815260200190565b6000602080835283518082850152825b81811015610702578581018301518582016040015282016106e6565b818111156107135783604083870101525b50601f01601f1916929092016040019392505050565b60208082526023908201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260408201526265737360e81b606082015260800190565b60208082526022908201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604082015261737360f01b606082015260800190565b60208082526026908201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604082015265616c616e636560d01b606082015260800190565b60208082526028908201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616040820152676c6c6f77616e636560c01b606082015260800190565b60208082526025908201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604082015264647265737360d81b606082015260800190565b60208082526024908201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646040820152637265737360e01b606082015260800190565b60208082526025908201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604082015264207a65726f60d81b606082015260800190565b90815260200190565b60ff91909116815260200190565b6000821982111561094057634e487b7160e01b81526011600452602481fd5b500190565b60028104600182168061095957607f821691505b6020821081141561097a57634e487b7160e01b600052602260045260246000fd5b5091905056fea26469706673582212205567a5a796ee020ebb7666360c633d8e53fe9d95b1c7bf5208d30b229f03b34264736f6c63430008000033",
  "bytecodeSha1": "6a8baa70e0258d085a0063213dc849b548d215cb",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.8.0+commit.c7dfd78e"
  },
  "contractName": "ERC20",
  "coverageMap": {
    "branches": {
      "1": {
        "ERC20._approve": {
          "32": [
            10198,
            10217,
            true
          ],
          "33": [
            10276,
            10297,
            true
          ]
        },
        "ERC20._transfer": {
          "34": [
            7505,
            7525,
            true
          ],
          "35": [
            7585,
            7608,
            true
          ],
          "36": [
            7776,
            7799,
            true
          ]
        },
        "ERC20.decreaseAllowance": {
          "31": [
            6679,
            6714,
            true
          ]
        },
        "ERC20.transferFrom": {
          "30": [
            5196,
            5222,
            true
          ]
        }
      },
      "2": {},
      "3": {},
      "4": {}
    },
    "statements": {
      "1": {
        "ERC20._approve": {
          "18": [
            10190,
            10258
          ],
          "19": [
            10268,
            10336
          ],
          "20": [
            10347,
            10383
          ],
          "21": [
            10393,
            10430
          ]
        },
        "ERC20._transfer": {
          "22": [
            7497,
            7567
          ],
          "23": [
            7577,
            7648
          ],
          "24": [
            7659,
            7706
          ],
          "25": [
            7768,
            7842
          ],
          "26": [
            7876,
            7918
          ],
          "27": [
            7938,
            7968
          ],
          "28": [
            7979,
            8019
          ],
          "29": [
            8030,
            8076
          ]
        },
        "ERC20.allowance": {
          "16": [
            4107,
            4141
          ]
        },
        "ERC20.approve": {
          "1": [
            4385,
            4424
          ],
          "2": [
            4434,
            4445
          ]
        },
        "ERC20.balanceOf": {
          "10": [
            3526,
            3551
          ]
        },
        "ERC20.decimals": {
          "8": [
            3193,
            3202
          ]
        },
        "ERC20.decreaseAllowance": {
          "12": [
            6671,
            6756
          ],
          "13": [
            6790,
            6857
          ],
          "14": [
            6878,
            6889
          ]
        },
        "ERC20.increaseAllowance": {
          "9": [
            5896,
            5976
          ]
        },
        "ERC20.name": {
          "0": [
            2260,
            2272
          ]
        },
        "ERC20.symbol": {
          "11": [
            2473,
            2487
          ]
        },
        "ERC20.totalSupply": {
          "3": [
            3349,
            3368
          ]
        },
        "ERC20.transfer": {
          "15": [
            3878,
            3913
          ]
        },
        "ERC20.transferFrom": {
          "4": [
            5071,
            5107
          ],
          "5": [
            5188,
            5267
          ],
          "6": [
            5301,
            5358
          ],
          "7": [
            5379,
            5390
          ]
        }
      },
      "2": {},
      "3": {},
      "4": {
        "Context._msgSender": {
          "17": [
            659,
            676
          ]
        }
      }
    }
  },
  "dependencies": [
    "OpenZeppelin/openzeppelin-contracts@4.3.1/Context",
    "OpenZeppelin/openzeppelin-contracts@4.3.1/IERC20",
    "OpenZeppelin/openzeppelin-contracts@4.3.1/IERC20Metadata"
  ],
  "deployedBytecode": "608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461012957806370a082311461013c57806395d89b411461014f578063a457c2d714610157578063beabacc81461016a578063dd62ed3e1461017d576100a9565b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100ec57806323b872dd14610101578063313ce56714610114575b600080fd5b6100b6610190565b6040516100c391906106d6565b60405180910390f35b6100df6100da3660046106a2565b610222565b6040516100c391906106cb565b6100f461023f565b6040516100c3919061090a565b6100df61010f366004610667565b610245565b61011c6102de565b6040516100c39190610913565b6100df6101373660046106a2565b6102e3565b6100f461014a366004610614565b610337565b6100b6610356565b6100df6101653660046106a2565b610365565b6100df610178366004610667565b6103de565b6100f461018b366004610635565b6103eb565b60606003805461019f90610945565b80601f01602080910402602001604051908101604052809291908181526020018280546101cb90610945565b80156102185780601f106101ed57610100808354040283529160200191610218565b820191906000526020600020905b8154815290600101906020018083116101fb57829003601f168201915b5050505050905090565b600061023661022f610416565b848461041a565b50600192915050565b60025490565b60006102528484846104ce565b6001600160a01b038416600090815260016020526040812081610273610416565b6001600160a01b03166001600160a01b03168152602001908152602001600020549050828110156102bf5760405162461bcd60e51b81526004016102b6906107f4565b60405180910390fd5b6102d3856102cb610416565b85840361041a565b506001949350505050565b601290565b60006102366102f0610416565b8484600160006102fe610416565b6001600160a01b03908116825260208083019390935260409182016000908120918b16815292529020546103329190610921565b61041a565b6001600160a01b0381166000908152602081905260409020545b919050565b60606004805461019f90610945565b60008060016000610374610416565b6001600160a01b03908116825260208083019390935260409182016000908120918816815292529020549050828110156103c05760405162461bcd60e51b81526004016102b6906108c5565b6103d46103cb610416565b8585840361041a565b5060019392505050565b60006103d48484846104ce565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b3390565b6001600160a01b0383166104405760405162461bcd60e51b81526004016102b690610881565b6001600160a01b0382166104665760405162461bcd60e51b81526004016102b69061076c565b6001600160a01b0380841660008181526001602090815260408083209487168084529490915290819020849055517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906104c190859061090a565b60405180910390a3505050565b6001600160a01b0383166104f45760405162461bcd60e51b81526004016102b69061083c565b6001600160a01b03821661051a5760405162461bcd60e51b81526004016102b690610729565b6105258383836105f8565b6001600160a01b0383166000908152602081905260409020548181101561055e5760405162461bcd60e51b81526004016102b6906107ae565b6001600160a01b03808516600090815260208190526040808220858503905591851681529081208054849290610595908490610921565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516105df919061090a565b60405180910390a36105f28484846105f8565b50505050565b505050565b80356001600160a01b038116811461035157600080fd5b600060208284031215610625578081fd5b61062e826105fd565b9392505050565b60008060408385031215610647578081fd5b610650836105fd565b915061065e602084016105fd565b90509250929050565b60008060006060848603121561067b578081fd5b610684846105fd565b9250610692602085016105fd565b9150604084013590509250925092565b600080604083850312156106b4578182fd5b6106bd836105fd565b946020939093013593505050565b901515815260200190565b6000602080835283518082850152825b81811015610702578581018301518582016040015282016106e6565b818111156107135783604083870101525b50601f01601f1916929092016040019392505050565b60208082526023908201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260408201526265737360e81b606082015260800190565b60208082526022908201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604082015261737360f01b606082015260800190565b60208082526026908201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604082015265616c616e636560d01b606082015260800190565b60208082526028908201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616040820152676c6c6f77616e636560c01b606082015260800190565b60208082526025908201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604082015264647265737360d81b606082015260800190565b60208082526024908201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646040820152637265737360e01b606082015260800190565b60208082526025908201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604082015264207a65726f60d81b606082015260800190565b90815260200190565b60ff91909116815260200190565b6000821982111561094057634e487b7160e01b81526011600452602481fd5b500190565b60028104600182168061095957607f821691505b6020821081141561097a57634e487b7160e01b600052602260045260246000fd5b5091905056fea26469706673582212205567a5a796ee020ebb7666360c633d8e53fe9d95b1c7bf5208d30b229f03b34264736f6c63430008000033",
  "deployedSourceMap": "1417:10435:1:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2181:98;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4286:166;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;3269:106::-;;;:::i;:::-;;;;;;;:::i;4919:478::-;;;;;;:::i;:::-;;:::i;3118:91::-;;;:::i;:::-;;;;;;;:::i;5792:212::-;;;;;;:::i;:::-;;:::i;3433:125::-;;;;;;:::i;:::-;;:::i;2392:102::-;;;:::i;6491:405::-;;;;;;:::i;:::-;;:::i;3761:180::-;;;;;;:::i;:::-;;:::i;3999:149::-;;;;;;:::i;:::-;;:::i;2181:98::-;2235:13;2267:5;2260:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2181:98;:::o;4286:166::-;4369:4;4385:39;4394:12;:10;:12::i;:::-;4408:7;4417:6;4385:8;:39::i;:::-;-1:-1:-1;4441:4:1;4286:166;;;;:::o;3269:106::-;3356:12;;3269:106;:::o;4919:478::-;5055:4;5071:36;5081:6;5089:9;5100:6;5071:9;:36::i;:::-;-1:-1:-1;;;;;5145:19:1;;5118:24;5145:19;;;:11;:19;;;;;5118:24;5165:12;:10;:12::i;:::-;-1:-1:-1;;;;;5145:33:1;-1:-1:-1;;;;;5145:33:1;;;;;;;;;;;;;5118:60;;5216:6;5196:16;:26;;5188:79;;;;-1:-1:-1;;;5188:79:1;;;;;;;:::i;:::-;;;;;;;;;5301:57;5310:6;5318:12;:10;:12::i;:::-;5351:6;5332:16;:25;5301:8;:57::i;:::-;-1:-1:-1;5386:4:1;;4919:478;-1:-1:-1;;;;4919:478:1:o;3118:91::-;3200:2;3118:91;:::o;5792:212::-;5880:4;5896:80;5905:12;:10;:12::i;:::-;5919:7;5965:10;5928:11;:25;5940:12;:10;:12::i;:::-;-1:-1:-1;;;;;5928:25:1;;;;;;;;;;;;;;;;;-1:-1:-1;5928:25:1;;;:34;;;;;;;;;;:47;;;;:::i;:::-;5896:8;:80::i;3433:125::-;-1:-1:-1;;;;;3533:18:1;;3507:7;3533:18;;;;;;;;;;;3433:125;;;;:::o;2392:102::-;2448:13;2480:7;2473:14;;;;;:::i;6491:405::-;6584:4;6600:24;6627:11;:25;6639:12;:10;:12::i;:::-;-1:-1:-1;;;;;6627:25:1;;;;;;;;;;;;;;;;;-1:-1:-1;6627:25:1;;;:34;;;;;;;;;;;-1:-1:-1;6679:35:1;;;;6671:85;;;;-1:-1:-1;;;6671:85:1;;;;;;;:::i;:::-;6790:67;6799:12;:10;:12::i;:::-;6813:7;6841:15;6822:16;:34;6790:8;:67::i;:::-;-1:-1:-1;6885:4:1;;6491:405;-1:-1:-1;;;6491:405:1:o;3761:180::-;3862:4;3878:35;3888:5;3895:9;3906:6;3878:9;:35::i;3999:149::-;-1:-1:-1;;;;;4114:18:1;;;4088:7;4114:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;3999:149::o;587:96:4:-;666:10;587:96;:::o;10067:370:1:-;-1:-1:-1;;;;;10198:19:1;;10190:68;;;;-1:-1:-1;;;10190:68:1;;;;;;;:::i;:::-;-1:-1:-1;;;;;10276:21:1;;10268:68;;;;-1:-1:-1;;;10268:68:1;;;;;;;:::i;:::-;-1:-1:-1;;;;;10347:18:1;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;;:36;;;10398:32;;;;;10377:6;;10398:32;:::i;:::-;;;;;;;;10067:370;;;:::o;7370:713::-;-1:-1:-1;;;;;7505:20:1;;7497:70;;;;-1:-1:-1;;;7497:70:1;;;;;;;:::i;:::-;-1:-1:-1;;;;;7585:23:1;;7577:71;;;;-1:-1:-1;;;7577:71:1;;;;;;;:::i;:::-;7659:47;7680:6;7688:9;7699:6;7659:20;:47::i;:::-;-1:-1:-1;;;;;7741:17:1;;7717:21;7741:17;;;;;;;;;;;7776:23;;;;7768:74;;;;-1:-1:-1;;;7768:74:1;;;;;;;:::i;:::-;-1:-1:-1;;;;;7876:17:1;;;:9;:17;;;;;;;;;;;7896:22;;;7876:42;;7938:20;;;;;;;;:30;;7912:6;;7876:9;7938:30;;7912:6;;7938:30;:::i;:::-;;;;;;;;8001:9;-1:-1:-1;;;;;7984:35:1;7993:6;-1:-1:-1;;;;;7984:35:1;;8012:6;7984:35;;;;;;:::i;:::-;;;;;;;;8030:46;8050:6;8058:9;8069:6;8030:19;:46::i;:::-;7370:713;;;;:::o;11021:121::-;;;;:::o;14:175:7:-;84:20;;-1:-1:-1;;;;;133:31:7;;123:42;;113:2;;179:1;176;169:12;194:198;;306:2;294:9;285:7;281:23;277:32;274:2;;;327:6;319;312:22;274:2;355:31;376:9;355:31;:::i;:::-;345:41;264:128;-1:-1:-1;;;264:128:7:o;397:274::-;;;526:2;514:9;505:7;501:23;497:32;494:2;;;547:6;539;532:22;494:2;575:31;596:9;575:31;:::i;:::-;565:41;;625:40;661:2;650:9;646:18;625:40;:::i;:::-;615:50;;484:187;;;;;:::o;676:342::-;;;;822:2;810:9;801:7;797:23;793:32;790:2;;;843:6;835;828:22;790:2;871:31;892:9;871:31;:::i;:::-;861:41;;921:40;957:2;946:9;942:18;921:40;:::i;:::-;911:50;;1008:2;997:9;993:18;980:32;970:42;;780:238;;;;;:::o;1023:266::-;;;1152:2;1140:9;1131:7;1127:23;1123:32;1120:2;;;1173:6;1165;1158:22;1120:2;1201:31;1222:9;1201:31;:::i;:::-;1191:41;1279:2;1264:18;;;;1251:32;;-1:-1:-1;;;1110:179:7:o;1294:187::-;1459:14;;1452:22;1434:41;;1422:2;1407:18;;1389:92::o;1486:603::-;;1627:2;1656;1645:9;1638:21;1688:6;1682:13;1731:6;1726:2;1715:9;1711:18;1704:34;1756:4;1769:140;1783:6;1780:1;1777:13;1769:140;;;1878:14;;;1874:23;;1868:30;1844:17;;;1863:2;1840:26;1833:66;1798:10;;1769:140;;;1927:6;1924:1;1921:13;1918:2;;;1997:4;1992:2;1983:6;1972:9;1968:22;1964:31;1957:45;1918:2;-1:-1:-1;2073:2:7;2052:15;-1:-1:-1;;2048:29:7;2033:45;;;;2080:2;2029:54;;1607:482;-1:-1:-1;;;1607:482:7:o;2094:399::-;2296:2;2278:21;;;2335:2;2315:18;;;2308:30;2374:34;2369:2;2354:18;;2347:62;-1:-1:-1;;;2440:2:7;2425:18;;2418:33;2483:3;2468:19;;2268:225::o;2498:398::-;2700:2;2682:21;;;2739:2;2719:18;;;2712:30;2778:34;2773:2;2758:18;;2751:62;-1:-1:-1;;;2844:2:7;2829:18;;2822:32;2886:3;2871:19;;2672:224::o;2901:402::-;3103:2;3085:21;;;3142:2;3122:18;;;3115:30;3181:34;3176:2;3161:18;;3154:62;-1:-1:-1;;;3247:2:7;3232:18;;3225:36;3293:3;3278:19;;3075:228::o;3308:404::-;3510:2;3492:21;;;3549:2;3529:18;;;3522:30;3588:34;3583:2;3568:18;;3561:62;-1:-1:-1;;;3654:2:7;3639:18;;3632:38;3702:3;3687:19;;3482:230::o;3717:401::-;3919:2;3901:21;;;3958:2;3938:18;;;3931:30;3997:34;3992:2;3977:18;;3970:62;-1:-1:-1;;;4063:2:7;4048:18;;4041:35;4108:3;4093:19;;3891:227::o;4123:400::-;4325:2;4307:21;;;4364:2;4344:18;;;4337:30;4403:34;4398:2;4383:18;;4376:62;-1:-1:-1;;;4469:2:7;4454:18;;4447:34;4513:3;4498:19;;4297:226::o;4528:401::-;4730:2;4712:21;;;4769:2;4749:18;;;4742:30;4808:34;4803:2;4788:18;;4781:62;-1:-1:-1;;;4874:2:7;4859:18;;4852:35;4919:3;4904:19;;4702:227::o;4934:177::-;5080:25;;;5068:2;5053:18;;5035:76::o;5116:184::-;5288:4;5276:17;;;;5258:36;;5246:2;5231:18;;5213:87::o;5305:229::-;;5376:1;5372:6;5369:1;5366:13;5363:2;;;-1:-1:-1;;;5402:33:7;;5458:4;5455:1;5448:15;5488:4;5409:3;5476:17;5363:2;-1:-1:-1;5519:9:7;;5353:181::o;5539:380::-;5624:1;5614:12;;5671:1;5661:12;;;5682:2;;5736:4;5728:6;5724:17;5714:27;;5682:2;5789;5781:6;5778:14;5758:18;5755:38;5752:2;;;5835:10;5830:3;5826:20;5823:1;5816:31;5870:4;5867:1;5860:15;5898:4;5895:1;5888:15;5752:2;;5594:325;;;:::o",
  "language": "Solidity",
  "natspec": {
    "details": "Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. For a generic mechanism see {ERC20PresetMinterPauser}. TIP: For a detailed writeup see our guide https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification. Finally, the non-standard {decreaseAllowance} and {increaseAllowance} functions have been added to mitigate the well-known issues around setting allowances. See {IERC20-approve}.",
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "constructor": {
        "details": "Sets the values for {name} and {symbol}. The default value of {decimals} is 18. To select a different value for {decimals} you should overload it. All two of these values are immutable: they can only be set once during construction."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."
      }
    },
    "version": 1
  },
  "offset": [
    1417,
    11852
  ],
  "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x39509351 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x129 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x13C JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x14F JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x157 JUMPI DUP1 PUSH4 0xBEABACC8 EQ PUSH2 0x16A JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x17D JUMPI PUSH2 0xA9 JUMP JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xAE JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xCC JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0xEC JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x101 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x114 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB6 PUSH2 0x190 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC3 SWAP2 SWAP1 PUSH2 0x6D6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xDF PUSH2 0xDA CALLDATASIZE PUSH1 0x4 PUSH2 0x6A2 JUMP JUMPDEST PUSH2 0x222 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC3 SWAP2 SWAP1 PUSH2 0x6CB JUMP JUMPDEST PUSH2 0xF4 PUSH2 0x23F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC3 SWAP2 SWAP1 PUSH2 0x90A JUMP JUMPDEST PUSH2 0xDF PUSH2 0x10F CALLDATASIZE PUSH1 0x4 PUSH2 0x667 JUMP JUMPDEST PUSH2 0x245 JUMP JUMPDEST PUSH2 0x11C PUSH2 0x2DE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC3 SWAP2 SWAP1 PUSH2 0x913 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x137 CALLDATASIZE PUSH1 0x4 PUSH2 0x6A2 JUMP JUMPDEST PUSH2 0x2E3 JUMP JUMPDEST PUSH2 0xF4 PUSH2 0x14A CALLDATASIZE PUSH1 0x4 PUSH2 0x614 JUMP JUMPDEST PUSH2 0x337 JUMP JUMPDEST PUSH2 0xB6 PUSH2 0x356 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x165 CALLDATASIZE PUSH1 0x4 PUSH2 0x6A2 JUMP JUMPDEST PUSH2 0x365 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x178 CALLDATASIZE PUSH1 0x4 PUSH2 0x667 JUMP JUMPDEST PUSH2 0x3DE JUMP JUMPDEST PUSH2 0xF4 PUSH2 0x18B CALLDATASIZE PUSH1 0x4 PUSH2 0x635 JUMP JUMPDEST PUSH2 0x3EB JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x19F SWAP1 PUSH2 0x945 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1CB SWAP1 PUSH2 0x945 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x218 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1ED JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x218 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1FB JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x236 PUSH2 0x22F PUSH2 0x416 JUMP JUMPDEST DUP5 DUP5 PUSH2 0x41A JUMP JUMPDEST POP PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x2 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x252 DUP5 DUP5 DUP5 PUSH2 0x4CE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP2 PUSH2 0x273 PUSH2 0x416 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP DUP3 DUP2 LT ISZERO PUSH2 0x2BF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B6 SWAP1 PUSH2 0x7F4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x2D3 DUP6 PUSH2 0x2CB PUSH2 0x416 JUMP JUMPDEST DUP6 DUP5 SUB PUSH2 0x41A JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x12 SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x236 PUSH2 0x2F0 PUSH2 0x416 JUMP JUMPDEST DUP5 DUP5 PUSH1 0x1 PUSH1 0x0 PUSH2 0x2FE PUSH2 0x416 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x40 SWAP2 DUP3 ADD PUSH1 0x0 SWAP1 DUP2 KECCAK256 SWAP2 DUP12 AND DUP2 MSTORE SWAP3 MSTORE SWAP1 KECCAK256 SLOAD PUSH2 0x332 SWAP2 SWAP1 PUSH2 0x921 JUMP JUMPDEST PUSH2 0x41A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x19F SWAP1 PUSH2 0x945 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 PUSH1 0x0 PUSH2 0x374 PUSH2 0x416 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x40 SWAP2 DUP3 ADD PUSH1 0x0 SWAP1 DUP2 KECCAK256 SWAP2 DUP9 AND DUP2 MSTORE SWAP3 MSTORE SWAP1 KECCAK256 SLOAD SWAP1 POP DUP3 DUP2 LT ISZERO PUSH2 0x3C0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B6 SWAP1 PUSH2 0x8C5 JUMP JUMPDEST PUSH2 0x3D4 PUSH2 0x3CB PUSH2 0x416 JUMP JUMPDEST DUP6 DUP6 DUP5 SUB PUSH2 0x41A JUMP JUMPDEST POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3D4 DUP5 DUP5 DUP5 PUSH2 0x4CE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x440 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B6 SWAP1 PUSH2 0x881 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x466 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B6 SWAP1 PUSH2 0x76C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 SWAP1 SWAP2 MSTORE SWAP1 DUP2 SWAP1 KECCAK256 DUP5 SWAP1 SSTORE MLOAD PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP1 PUSH2 0x4C1 SWAP1 DUP6 SWAP1 PUSH2 0x90A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x4F4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B6 SWAP1 PUSH2 0x83C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x51A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B6 SWAP1 PUSH2 0x729 JUMP JUMPDEST PUSH2 0x525 DUP4 DUP4 DUP4 PUSH2 0x5F8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x55E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B6 SWAP1 PUSH2 0x7AE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP6 DUP6 SUB SWAP1 SSTORE SWAP2 DUP6 AND DUP2 MSTORE SWAP1 DUP2 KECCAK256 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0x595 SWAP1 DUP5 SWAP1 PUSH2 0x921 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0x5DF SWAP2 SWAP1 PUSH2 0x90A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x5F2 DUP5 DUP5 DUP5 PUSH2 0x5F8 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x351 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x625 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x62E DUP3 PUSH2 0x5FD JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x647 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x650 DUP4 PUSH2 0x5FD JUMP JUMPDEST SWAP2 POP PUSH2 0x65E PUSH1 0x20 DUP5 ADD PUSH2 0x5FD JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x67B JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x684 DUP5 PUSH2 0x5FD JUMP JUMPDEST SWAP3 POP PUSH2 0x692 PUSH1 0x20 DUP6 ADD PUSH2 0x5FD JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x6B4 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x6BD DUP4 PUSH2 0x5FD JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE DUP3 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x702 JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x6E6 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x713 JUMPI DUP4 PUSH1 0x40 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x40 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x23 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x40 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x22 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x26 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x40 DUP3 ADD MSTORE PUSH6 0x616C616E6365 PUSH1 0xD0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x28 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732061 PUSH1 0x40 DUP3 ADD MSTORE PUSH8 0x6C6C6F77616E6365 PUSH1 0xC0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x40 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x24 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x40 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x40 DUP3 ADD MSTORE PUSH5 0x207A65726F PUSH1 0xD8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0xFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x940 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 DUP2 REVERT JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x2 DUP2 DIV PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x959 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x97A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SSTORE PUSH8 0xA5A796EE020EBB76 PUSH7 0x360C633D8E53FE SWAP14 SWAP6 0xB1 0xC7 0xBF MSTORE ADDMOD 0xD3 SIGNEXTEND 0x22 SWAP16 SUB 0xB3 TIMESTAMP PUSH5 0x736F6C6343 STOP ADDMOD STOP STOP CALLER ",
  "pcMap": {
    "0": {
      "offset": [
        1417,
        11852
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x80"
    },
    "2": {
      "fn": null,
      "offset": [
        1417,
        11852
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "4": {
      "fn": null,
      "offset": [
        1417,
        11852
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "5": {
      "fn": null,
      "offset": [
        1417,
        11852
      ],
      "op": "CALLVALUE",
      "path": "1"
    },
    "6": {
      "fn": null,
      "offset": [
        1417,
        11852
      ],
      "op": "DUP1",
      "path": "1"
    },
    "7": {
      "fn": null,
      "offset": [
        1417,
        11852
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "8": {
      "fn": null,
      "offset": [
        1417,
        11852
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x10"
    },
    "11": {
      "fn": null,
      "offset": [
        1417,
        11852
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "12": {
      "fn": null,
      "offset": [
        1417,
        11852
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "14": {
      "fn": null,
      "offset": [
        1417,
        11852
      ],
      "op": "DUP1",
      "path": "1"
    },
    "15": {
      "dev": "Cannot send ether to nonpayable function",
      "fn": null,
      "offset": [
        1417,
        11852
      ],
      "op": "REVERT",
      "path": "1"
    },
    "16": {
      "fn": null,
      "offset": [
        1417,
        11852
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "17": {
      "fn": null,
      "offset": [
        1417,
        11852
      ],
      "op": "POP",
      "path": "1"
    },
    "18": {
      "fn": null,
      "offset": [
        1417,
        11852
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "20": {
      "fn": null,
      "offset": [
        1417,
        11852
      ],
      "op": "CALLDATASIZE",
      "path": "1"
    },
    "21": {
      "fn": null,
      "offset": [
        1417,
        11852
      ],
      "op": "LT",
      "path": "1"
    },
    "22": {
      "fn": null,
      "offset": [
        1417,
        11852
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xA9"
    },
    "25": {
      "fn": null,
      "offset": [
        1417,
        11852
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "26": {
      "fn": null,
      "offset": [
        1417,
        11852
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "28": {
      "fn": null,
      "offset": [
        1417,
        11852
      ],
      "op": "CALLDATALOAD",
      "path": "1"
    },
    "29": {
      "fn": null,
      "offset": [
        1417,
        11852
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xE0"
    },
    "31": {
      "fn": null,
      "offset": [
        1417,
        11852
      ],
      "op": "SHR",
      "path": "1"
    },
    "32": {
      "fn": null,
      "offset": [
        1417,
        11852
      ],
      "op": "DUP1",
      "path": "1"
    },
    "33": {
      "fn": null,
      "offset": [
        1417,
        11852
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0x39509351"
    },
    "38": {
      "fn": null,
      "offset": [
        1417,
        11852
      ],
      "op": "GT",
      "path": "1"
    },
    "39": {
      "fn": null,
      "offset": [
        1417,
        11852
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x71"
    },
    "42": {
      "fn": null,
      "offset": [
        1417,
        11852
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "43": {
      "fn": null,
      "offset": [
        1417,
        11852
      ],
      "op": "DUP1",
      "path": "1"
    },
    "44": {
      "fn": null,
      "offset": [
        1417,
        11852
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0x39509351"
    },
    "49": {
      "fn": null,
      "offset": [
        1417,
        11852
      ],
      "op": "EQ",
      "path": "1"
    },
    "50": {
      "fn": null,
      "offset": [
        1417,
        11852
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x129"
    },
    "53": {
      "fn": null,
      "offset": [
        1417,
        11852
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "54": {
      "fn": null,
      "offset": [
        1417,
        11852
      ],
      "op": "DUP1",
      "path": "1"
    },
    "55": {
      "fn": null,
      "offset": [
        1417,
        11852
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0x70A08231"
    },
    "60": {
      "fn": null,
      "offset": [
        1417,
        11852
      ],
      "op": "EQ",
      "path": "1"
    },
    "61": {
      "fn": null,
      "offset": [
        1417,
        11852
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x13C"
    },
    "64": {
      "fn": null,
      "offset": [
        1417,
        11852
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "65": {
      "fn": null,
      "offset": [
        1417,
        11852
      ],
      "op": "DUP1",
      "path": "1"
    },
    "66": {
      "fn": null,
      "offset": [
        1417,
        11852
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0x95D89B41"
    },
    "71": {
      "fn": null,
      "offset": [
        1417,
        11852
      ],
      "op": "EQ",
      "path": "1"
    },
    "72": {
      "fn": null,
      "offset": [
        1417,
        11852
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x14F"
    },
    "75": {
      "fn": null,
      "offset": [
        1417,
        11852
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "76": {
      "fn": null,
      "offset": [
        1417,
        11852
      ],
      "op": "DUP1",
      "path": "1"
    },
    "77": {
      "fn": null,
      "offset": [
        1417,
        11852
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0xA457C2D7"
    },
    "82": {
      "fn": null,
      "offset": [
        1417,
        11852
      ],
      "op": "EQ",
      "path": "1"
    },
    "83": {
      "fn": null,
      "offset": [
        1417,
        11852
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x157"
    },
    "86": {
      "fn": null,
      "offset": [
        1417,
        11852
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "87": {
      "fn": null,
      "offset": [
        1417,
        11852
      ],
      "op": "DUP1",
      "path": "1"
    },
    "88": {
      "fn": null,
      "offset": [
        1417,
        11852
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0xBEABACC8"
    },
    "93": {
      "fn": null,
      "offset": [
        1417,
        11852
      ],
      "op": "EQ",
      "path": "1"
    },
    "94": {
      "fn": null,
      "offset": [
        1417,
        11852
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x16A"
    },
    "97": {
      "fn": null,
      "offset": [
        1417,
        11852
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "98": {
      "fn": null,
      "offset": [
        1417,
        11852
      ],
      "op": "DUP1",
      "path": "1"
    },
    "99": {
      "fn": null,
      "offset": [
        1417,
        11852
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0xDD62ED3E"
    },
    "104": {
      "fn": null,
      "offset": [
        1417,
        11852
      ],
      "op": "EQ",
      "path": "1"
    },
    "105": {
      "fn": null,
      "offset": [
        1417,
        11852
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x17D"
    },
    "108": {
      "fn": null,
      "offset": [
        1417,
        11852
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "109": {
      "fn": null,
      "offset": [
        1417,
        11852
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xA9"
    },
    "112": {
      "fn": null,
      "offset": [
        1417,
        11852
      ],
      "op": "JUMP",
      "path": "1"
    },
    "113": {
      "fn": null,
      "offset": [
        1417,
        11852
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "114": {
      "fn": null,
      "offset": [
        1417,
        11852
      ],
      "op": "DUP1",
      "path": "1"
    },
    "115": {
      "fn": null,
      "offset": [
        1417,
        11852
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0x6FDDE03"
    },
    "120": {
      "fn": null,
      "offset": [
        1417,
        11852
      ],
      "op": "EQ",
      "path": "1"
    },
    "121": {
      "fn": null,
      "offset": [
        1417,
        11852
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xAE"
    },
    "124": {
      "fn": null,
      "offset": [
        1417,
        11852
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "125": {
      "fn": null,
      "offset": [
        1417,
        11852
      ],
      "op": "DUP1",
      "path": "1"
    },
    "126": {
      "fn": null,
      "offset": [
        1417,
        11852
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0x95EA7B3"
    },
    "131": {
      "fn": null,
      "offset": [
        1417,
        11852
      ],
      "op": "EQ",
      "path": "1"
    },
    "132": {
      "fn": null,
      "offset": [
        1417,
        11852
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xCC"
    },
    "135": {
      "fn": null,
      "offset": [
        1417,
        11852
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "136": {
      "fn": null,
      "offset": [
        1417,
        11852
      ],
      "op": "DUP1",
      "path": "1"
    },
    "137": {
      "fn": null,
      "offset": [
        1417,
        11852
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0x18160DDD"
    },
    "142": {
      "fn": null,
      "offset": [
        1417,
        11852
      ],
      "op": "EQ",
      "path": "1"
    },
    "143": {
      "fn": null,
      "offset": [
        1417,
        11852
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xEC"
    },
    "146": {
      "fn": null,
      "offset": [
        1417,
        11852
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "147": {
      "fn": null,
      "offset": [
        1417,
        11852
      ],
      "op": "DUP1",
      "path": "1"
    },
    "148": {
      "fn": null,
      "offset": [
        1417,
        11852
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0x23B872DD"
    },
    "153": {
      "fn": null,
      "offset": [
        1417,
        11852
      ],
      "op": "EQ",
      "path": "1"
    },
    "154": {
      "fn": null,
      "offset": [
        1417,
        11852
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x101"
    },
    "157": {
      "fn": null,
      "offset": [
        1417,
        11852
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "158": {
      "fn": null,
      "offset": [
        1417,
        11852
      ],
      "op": "DUP1",
      "path": "1"
    },
    "159": {
      "fn": null,
      "offset": [
        1417,
        11852
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0x313CE567"
    },
    "164": {
      "fn": null,
      "offset": [
        1417,
        11852
      ],
      "op": "EQ",
      "path": "1"
    },
    "165": {
      "fn": null,
      "offset": [
        1417,
        11852
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x114"
    },
    "168": {
      "fn": null,
      "offset": [
        1417,
        11852
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "169": {
      "fn": null,
      "offset": [
        1417,
        11852
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "170": {
      "fn": null,
      "offset": [
        1417,
        11852
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "172": {
      "fn": null,
      "offset": [
        1417,
        11852
      ],
      "op": "DUP1",
      "path": "1"
    },
    "173": {
      "first_revert": true,
      "fn": null,
      "offset": [
        1417,
        11852
      ],
      "op": "REVERT",
      "path": "1"
    },
    "174": {
      "fn": "ERC20.name",
      "offset": [
        2181,
        2279
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "175": {
      "fn": "ERC20.name",
      "offset": [
        2181,
        2279
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xB6"
    },
    "178": {
      "fn": "ERC20.name",
      "offset": [
        2181,
        2279
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x190"
    },
    "181": {
      "fn": "ERC20.name",
      "jump": "i",
      "offset": [
        2181,
        2279
      ],
      "op": "JUMP",
      "path": "1"
    },
    "182": {
      "fn": "ERC20.name",
      "offset": [
        2181,
        2279
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "183": {
      "fn": "ERC20.name",
      "offset": [
        2181,
        2279
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "185": {
      "fn": "ERC20.name",
      "offset": [
        2181,
        2279
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "186": {
      "fn": "ERC20.name",
      "offset": [
        2181,
        2279
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xC3"
    },
    "189": {
      "fn": "ERC20.name",
      "offset": [
        2181,
        2279
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "190": {
      "fn": "ERC20.name",
      "offset": [
        2181,
        2279
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "191": {
      "fn": "ERC20.name",
      "offset": [
        2181,
        2279
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x6D6"
    },
    "194": {
      "fn": "ERC20.name",
      "jump": "i",
      "offset": [
        2181,
        2279
      ],
      "op": "JUMP",
      "path": "1"
    },
    "195": {
      "fn": "ERC20.name",
      "offset": [
        2181,
        2279
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "196": {
      "fn": "ERC20.name",
      "offset": [
        2181,
        2279
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "198": {
      "fn": "ERC20.name",
      "offset": [
        2181,
        2279
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "199": {
      "fn": "ERC20.name",
      "offset": [
        2181,
        2279
      ],
      "op": "DUP1",
      "path": "1"
    },
    "200": {
      "fn": "ERC20.name",
      "offset": [
        2181,
        2279
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "201": {
      "fn": "ERC20.name",
      "offset": [
        2181,
        2279
      ],
      "op": "SUB",
      "path": "1"
    },
    "202": {
      "fn": "ERC20.name",
      "offset": [
        2181,
        2279
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "203": {
      "fn": "ERC20.name",
      "offset": [
        2181,
        2279
      ],
      "op": "RETURN",
      "path": "1"
    },
    "204": {
      "fn": "ERC20.approve",
      "offset": [
        4286,
        4452
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "205": {
      "fn": "ERC20.approve",
      "offset": [
        4286,
        4452
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xDF"
    },
    "208": {
      "fn": "ERC20.approve",
      "offset": [
        4286,
        4452
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xDA"
    },
    "211": {
      "fn": "ERC20.approve",
      "offset": [
        4286,
        4452
      ],
      "op": "CALLDATASIZE",
      "path": "1"
    },
    "212": {
      "fn": "ERC20.approve",
      "offset": [
        4286,
        4452
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "214": {
      "fn": "ERC20.approve",
      "offset": [
        4286,
        4452
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x6A2"
    },
    "217": {
      "fn": "ERC20.approve",
      "jump": "i",
      "offset": [
        4286,
        4452
      ],
      "op": "JUMP",
      "path": "1"
    },
    "218": {
      "fn": "ERC20.approve",
      "offset": [
        4286,
        4452
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "219": {
      "fn": "ERC20.approve",
      "offset": [
        4286,
        4452
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x222"
    },
    "222": {
      "fn": "ERC20.approve",
      "jump": "i",
      "offset": [
        4286,
        4452
      ],
      "op": "JUMP",
      "path": "1"
    },
    "223": {
      "fn": "ERC20.approve",
      "offset": [
        4286,
        4452
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "224": {
      "fn": "ERC20.approve",
      "offset": [
        4286,
        4452
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "226": {
      "fn": "ERC20.approve",
      "offset": [
        4286,
        4452
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "227": {
      "fn": "ERC20.approve",
      "offset": [
        4286,
        4452
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xC3"
    },
    "230": {
      "fn": "ERC20.approve",
      "offset": [
        4286,
        4452
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "231": {
      "fn": "ERC20.approve",
      "offset": [
        4286,
        4452
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "232": {
      "fn": "ERC20.approve",
      "offset": [
        4286,
        4452
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x6CB"
    },
    "235": {
      "fn": "ERC20.approve",
      "jump": "i",
      "offset": [
        4286,
        4452
      ],
      "op": "JUMP",
      "path": "1"
    },
    "236": {
      "fn": "ERC20.totalSupply",
      "offset": [
        3269,
        3375
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "237": {
      "fn": "ERC20.totalSupply",
      "offset": [
        3269,
        3375
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xF4"
    },
    "240": {
      "fn": "ERC20.totalSupply",
      "offset": [
        3269,
        3375
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x23F"
    },
    "243": {
      "fn": "ERC20.totalSupply",
      "jump": "i",
      "offset": [
        3269,
        3375
      ],
      "op": "JUMP",
      "path": "1"
    },
    "244": {
      "fn": "ERC20.totalSupply",
      "offset": [
        3269,
        3375
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "245": {
      "fn": "ERC20.totalSupply",
      "offset": [
        3269,
        3375
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "247": {
      "fn": "ERC20.totalSupply",
      "offset": [
        3269,
        3375
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "248": {
      "fn": "ERC20.totalSupply",
      "offset": [
        3269,
        3375
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xC3"
    },
    "251": {
      "fn": "ERC20.totalSupply",
      "offset": [
        3269,
        3375
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "252": {
      "fn": "ERC20.totalSupply",
      "offset": [
        3269,
        3375
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "253": {
      "fn": "ERC20.totalSupply",
      "offset": [
        3269,
        3375
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x90A"
    },
    "256": {
      "fn": "ERC20.totalSupply",
      "jump": "i",
      "offset": [
        3269,
        3375
      ],
      "op": "JUMP",
      "path": "1"
    },
    "257": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4919,
        5397
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "258": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4919,
        5397
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xDF"
    },
    "261": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4919,
        5397
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x10F"
    },
    "264": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4919,
        5397
      ],
      "op": "CALLDATASIZE",
      "path": "1"
    },
    "265": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4919,
        5397
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "267": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4919,
        5397
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x667"
    },
    "270": {
      "fn": "ERC20.transferFrom",
      "jump": "i",
      "offset": [
        4919,
        5397
      ],
      "op": "JUMP",
      "path": "1"
    },
    "271": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4919,
        5397
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "272": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4919,
        5397
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x245"
    },
    "275": {
      "fn": "ERC20.transferFrom",
      "jump": "i",
      "offset": [
        4919,
        5397
      ],
      "op": "JUMP",
      "path": "1"
    },
    "276": {
      "fn": "ERC20.decimals",
      "offset": [
        3118,
        3209
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "277": {
      "fn": "ERC20.decimals",
      "offset": [
        3118,
        3209
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x11C"
    },
    "280": {
      "fn": "ERC20.decimals",
      "offset": [
        3118,
        3209
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x2DE"
    },
    "283": {
      "fn": "ERC20.decimals",
      "jump": "i",
      "offset": [
        3118,
        3209
      ],
      "op": "JUMP",
      "path": "1"
    },
    "284": {
      "fn": "ERC20.decimals",
      "offset": [
        3118,
        3209
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "285": {
      "fn": "ERC20.decimals",
      "offset": [
        3118,
        3209
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "287": {
      "fn": "ERC20.decimals",
      "offset": [
        3118,
        3209
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "288": {
      "fn": "ERC20.decimals",
      "offset": [
        3118,
        3209
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xC3"
    },
    "291": {
      "fn": "ERC20.decimals",
      "offset": [
        3118,
        3209
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "292": {
      "fn": "ERC20.decimals",
      "offset": [
        3118,
        3209
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "293": {
      "fn": "ERC20.decimals",
      "offset": [
        3118,
        3209
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x913"
    },
    "296": {
      "fn": "ERC20.decimals",
      "jump": "i",
      "offset": [
        3118,
        3209
      ],
      "op": "JUMP",
      "path": "1"
    },
    "297": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5792,
        6004
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "298": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5792,
        6004
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xDF"
    },
    "301": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5792,
        6004
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x137"
    },
    "304": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5792,
        6004
      ],
      "op": "CALLDATASIZE",
      "path": "1"
    },
    "305": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5792,
        6004
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "307": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5792,
        6004
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x6A2"
    },
    "310": {
      "fn": "ERC20.increaseAllowance",
      "jump": "i",
      "offset": [
        5792,
        6004
      ],
      "op": "JUMP",
      "path": "1"
    },
    "311": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5792,
        6004
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "312": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5792,
        6004
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x2E3"
    },
    "315": {
      "fn": "ERC20.increaseAllowance",
      "jump": "i",
      "offset": [
        5792,
        6004
      ],
      "op": "JUMP",
      "path": "1"
    },
    "316": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3433,
        3558
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "317": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3433,
        3558
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xF4"
    },
    "320": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3433,
        3558
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x14A"
    },
    "323": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3433,
        3558
      ],
      "op": "CALLDATASIZE",
      "path": "1"
    },
    "324": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3433,
        3558
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "326": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3433,
        3558
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x614"
    },
    "329": {
      "fn": "ERC20.balanceOf",
      "jump": "i",
      "offset": [
        3433,
        3558
      ],
      "op": "JUMP",
      "path": "1"
    },
    "330": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3433,
        3558
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "331": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3433,
        3558
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x337"
    },
    "334": {
      "fn": "ERC20.balanceOf",
      "jump": "i",
      "offset": [
        3433,
        3558
      ],
      "op": "JUMP",
      "path": "1"
    },
    "335": {
      "fn": "ERC20.symbol",
      "offset": [
        2392,
        2494
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "336": {
      "fn": "ERC20.symbol",
      "offset": [
        2392,
        2494
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xB6"
    },
    "339": {
      "fn": "ERC20.symbol",
      "offset": [
        2392,
        2494
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x356"
    },
    "342": {
      "fn": "ERC20.symbol",
      "jump": "i",
      "offset": [
        2392,
        2494
      ],
      "op": "JUMP",
      "path": "1"
    },
    "343": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6491,
        6896
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "344": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6491,
        6896
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xDF"
    },
    "347": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6491,
        6896
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x165"
    },
    "350": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6491,
        6896
      ],
      "op": "CALLDATASIZE",
      "path": "1"
    },
    "351": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6491,
        6896
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "353": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6491,
        6896
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x6A2"
    },
    "356": {
      "fn": "ERC20.decreaseAllowance",
      "jump": "i",
      "offset": [
        6491,
        6896
      ],
      "op": "JUMP",
      "path": "1"
    },
    "357": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6491,
        6896
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "358": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6491,
        6896
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x365"
    },
    "361": {
      "fn": "ERC20.decreaseAllowance",
      "jump": "i",
      "offset": [
        6491,
        6896
      ],
      "op": "JUMP",
      "path": "1"
    },
    "362": {
      "fn": "ERC20.transfer",
      "offset": [
        3761,
        3941
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "363": {
      "fn": "ERC20.transfer",
      "offset": [
        3761,
        3941
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xDF"
    },
    "366": {
      "fn": "ERC20.transfer",
      "offset": [
        3761,
        3941
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x178"
    },
    "369": {
      "fn": "ERC20.transfer",
      "offset": [
        3761,
        3941
      ],
      "op": "CALLDATASIZE",
      "path": "1"
    },
    "370": {
      "fn": "ERC20.transfer",
      "offset": [
        3761,
        3941
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "372": {
      "fn": "ERC20.transfer",
      "offset": [
        3761,
        3941
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x667"
    },
    "375": {
      "fn": "ERC20.transfer",
      "jump": "i",
      "offset": [
        3761,
        3941
      ],
      "op": "JUMP",
      "path": "1"
    },
    "376": {
      "fn": "ERC20.transfer",
      "offset": [
        3761,
        3941
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "377": {
      "fn": "ERC20.transfer",
      "offset": [
        3761,
        3941
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x3DE"
    },
    "380": {
      "fn": "ERC20.transfer",
      "jump": "i",
      "offset": [
        3761,
        3941
      ],
      "op": "JUMP",
      "path": "1"
    },
    "381": {
      "fn": "ERC20.allowance",
      "offset": [
        3999,
        4148
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "382": {
      "fn": "ERC20.allowance",
      "offset": [
        3999,
        4148
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xF4"
    },
    "385": {
      "fn": "ERC20.allowance",
      "offset": [
        3999,
        4148
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x18B"
    },
    "388": {
      "fn": "ERC20.allowance",
      "offset": [
        3999,
        4148
      ],
      "op": "CALLDATASIZE",
      "path": "1"
    },
    "389": {
      "fn": "ERC20.allowance",
      "offset": [
        3999,
        4148
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "391": {
      "fn": "ERC20.allowance",
      "offset": [
        3999,
        4148
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x635"
    },
    "394": {
      "fn": "ERC20.allowance",
      "jump": "i",
      "offset": [
        3999,
        4148
      ],
      "op": "JUMP",
      "path": "1"
    },
    "395": {
      "fn": "ERC20.allowance",
      "offset": [
        3999,
        4148
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "396": {
      "fn": "ERC20.allowance",
      "offset": [
        3999,
        4148
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x3EB"
    },
    "399": {
      "fn": "ERC20.allowance",
      "jump": "i",
      "offset": [
        3999,
        4148
      ],
      "op": "JUMP",
      "path": "1"
    },
    "400": {
      "fn": "ERC20.name",
      "offset": [
        2181,
        2279
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "401": {
      "fn": "ERC20.name",
      "offset": [
        2235,
        2248
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x60"
    },
    "403": {
      "fn": "ERC20.name",
      "offset": [
        2267,
        2272
      ],
      "op": "PUSH1",
      "path": "1",
      "statement": 0,
      "value": "0x3"
    },
    "405": {
      "fn": "ERC20.name",
      "offset": [
        2260,
        2272
      ],
      "op": "DUP1",
      "path": "1"
    },
    "406": {
      "fn": "ERC20.name",
      "offset": [
        2260,
        2272
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "407": {
      "fn": "ERC20.name",
      "offset": [
        2260,
        2272
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x19F"
    },
    "410": {
      "fn": "ERC20.name",
      "offset": [
        2260,
        2272
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "411": {
      "fn": "ERC20.name",
      "offset": [
        2260,
        2272
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x945"
    },
    "414": {
      "fn": "ERC20.name",
      "jump": "i",
      "offset": [
        2260,
        2272
      ],
      "op": "JUMP",
      "path": "1"
    },
    "415": {
      "fn": "ERC20.name",
      "offset": [
        2260,
        2272
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "416": {
      "fn": "ERC20.name",
      "offset": [
        2260,
        2272
      ],
      "op": "DUP1",
      "path": "1"
    },
    "417": {
      "fn": "ERC20.name",
      "offset": [
        2260,
        2272
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1F"
    },
    "419": {
      "fn": "ERC20.name",
      "offset": [
        2260,
        2272
      ],
      "op": "ADD",
      "path": "1"
    },
    "420": {
      "fn": "ERC20.name",
      "offset": [
        2260,
        2272
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "422": {
      "fn": "ERC20.name",
      "offset": [
        2260,
        2272
      ],
      "op": "DUP1",
      "path": "1"
    },
    "423": {
      "fn": "ERC20.name",
      "offset": [
        2260,
        2272
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "424": {
      "fn": "ERC20.name",
      "offset": [
        2260,
        2272
      ],
      "op": "DIV",
      "path": "1"
    },
    "425": {
      "fn": "ERC20.name",
      "offset": [
        2260,
        2272
      ],
      "op": "MUL",
      "path": "1"
    },
    "426": {
      "fn": "ERC20.name",
      "offset": [
        2260,
        2272
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "428": {
      "fn": "ERC20.name",
      "offset": [
        2260,
        2272
      ],
      "op": "ADD",
      "path": "1"
    },
    "429": {
      "fn": "ERC20.name",
      "offset": [
        2260,
        2272
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "431": {
      "fn": "ERC20.name",
      "offset": [
        2260,
        2272
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "432": {
      "fn": "ERC20.name",
      "offset": [
        2260,
        2272
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "433": {
      "fn": "ERC20.name",
      "offset": [
        2260,
        2272
      ],
      "op": "DUP2",
      "path": "1"
    },
    "434": {
      "fn": "ERC20.name",
      "offset": [
        2260,
        2272
      ],
      "op": "ADD",
      "path": "1"
    },
    "435": {
      "fn": "ERC20.name",
      "offset": [
        2260,
        2272
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "437": {
      "fn": "ERC20.name",
      "offset": [
        2260,
        2272
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "438": {
      "fn": "ERC20.name",
      "offset": [
        2260,
        2272
      ],
      "op": "DUP1",
      "path": "1"
    },
    "439": {
      "fn": "ERC20.name",
      "offset": [
        2260,
        2272
      ],
      "op": "SWAP3",
      "path": "1"
    },
    "440": {
      "fn": "ERC20.name",
      "offset": [
        2260,
        2272
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "441": {
      "fn": "ERC20.name",
      "offset": [
        2260,
        2272
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "442": {
      "fn": "ERC20.name",
      "offset": [
        2260,
        2272
      ],
      "op": "DUP2",
      "path": "1"
    },
    "443": {
      "fn": "ERC20.name",
      "offset": [
        2260,
        2272
      ],
      "op": "DUP2",
      "path": "1"
    },
    "444": {
      "fn": "ERC20.name",
      "offset": [
        2260,
        2272
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "445": {
      "fn": "ERC20.name",
      "offset": [
        2260,
        2272
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "447": {
      "fn": "ERC20.name",
      "offset": [
        2260,
        2272
      ],
      "op": "ADD",
      "path": "1"
    },
    "448": {
      "fn": "ERC20.name",
      "offset": [
        2260,
        2272
      ],
      "op": "DUP3",
      "path": "1"
    },
    "449": {
      "fn": "ERC20.name",
      "offset": [
        2260,
        2272
      ],
      "op": "DUP1",
      "path": "1"
    },
    "450": {
      "fn": "ERC20.name",
      "offset": [
        2260,
        2272
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "451": {
      "fn": "ERC20.name",
      "offset": [
        2260,
        2272
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x1CB"
    },
    "454": {
      "fn": "ERC20.name",
      "offset": [
        2260,
        2272
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "455": {
      "fn": "ERC20.name",
      "offset": [
        2260,
        2272
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x945"
    },
    "458": {
      "fn": "ERC20.name",
      "jump": "i",
      "offset": [
        2260,
        2272
      ],
      "op": "JUMP",
      "path": "1"
    },
    "459": {
      "fn": "ERC20.name",
      "offset": [
        2260,
        2272
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "460": {
      "fn": "ERC20.name",
      "offset": [
        2260,
        2272
      ],
      "op": "DUP1",
      "path": "1"
    },
    "461": {
      "fn": "ERC20.name",
      "offset": [
        2260,
        2272
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "462": {
      "fn": "ERC20.name",
      "offset": [
        2260,
        2272
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x218"
    },
    "465": {
      "fn": "ERC20.name",
      "offset": [
        2260,
        2272
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "466": {
      "fn": "ERC20.name",
      "offset": [
        2260,
        2272
      ],
      "op": "DUP1",
      "path": "1"
    },
    "467": {
      "fn": "ERC20.name",
      "offset": [
        2260,
        2272
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1F"
    },
    "469": {
      "fn": "ERC20.name",
      "offset": [
        2260,
        2272
      ],
      "op": "LT",
      "path": "1"
    },
    "470": {
      "fn": "ERC20.name",
      "offset": [
        2260,
        2272
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x1ED"
    },
    "473": {
      "fn": "ERC20.name",
      "offset": [
        2260,
        2272
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "474": {
      "fn": "ERC20.name",
      "offset": [
        2260,
        2272
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x100"
    },
    "477": {
      "fn": "ERC20.name",
      "offset": [
        2260,
        2272
      ],
      "op": "DUP1",
      "path": "1"
    },
    "478": {
      "fn": "ERC20.name",
      "offset": [
        2260,
        2272
      ],
      "op": "DUP4",
      "path": "1"
    },
    "479": {
      "fn": "ERC20.name",
      "offset": [
        2260,
        2272
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "480": {
      "fn": "ERC20.name",
      "offset": [
        2260,
        2272
      ],
      "op": "DIV",
      "path": "1"
    },
    "481": {
      "fn": "ERC20.name",
      "offset": [
        2260,
        2272
      ],
      "op": "MUL",
      "path": "1"
    },
    "482": {
      "fn": "ERC20.name",
      "offset": [
        2260,
        2272
      ],
      "op": "DUP4",
      "path": "1"
    },
    "483": {
      "fn": "ERC20.name",
      "offset": [
        2260,
        2272
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "484": {
      "fn": "ERC20.name",
      "offset": [
        2260,
        2272
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "485": {
      "fn": "ERC20.name",
      "offset": [
        2260,
        2272
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "487": {
      "fn": "ERC20.name",
      "offset": [
        2260,
        2272
      ],
      "op": "ADD",
      "path": "1"
    },
    "488": {
      "fn": "ERC20.name",
      "offset": [
        2260,
        2272
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "489": {
      "fn": "ERC20.name",
      "offset": [
        2260,
        2272
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x218"
    },
    "492": {
      "fn": "ERC20.name",
      "offset": [
        2260,
        2272
      ],
      "op": "JUMP",
      "path": "1"
    },
    "493": {
      "fn": "ERC20.name",
      "offset": [
        2260,
        2272
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "494": {
      "fn": "ERC20.name",
      "offset": [
        2260,
        2272
      ],
      "op": "DUP3",
      "path": "1"
    },
    "495": {
      "fn": "ERC20.name",
      "offset": [
        2260,
        2272
      ],
      "op": "ADD",
      "path": "1"
    },
    "496": {
      "fn": "ERC20.name",
      "offset": [
        2260,
        2272
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "497": {
      "fn": "ERC20.name",
      "offset": [
        2260,
        2272
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "498": {
      "fn": "ERC20.name",
      "offset": [
        2260,
        2272
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "500": {
      "fn": "ERC20.name",
      "offset": [
        2260,
        2272
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "501": {
      "fn": "ERC20.name",
      "offset": [
        2260,
        2272
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "503": {
      "fn": "ERC20.name",
      "offset": [
        2260,
        2272
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "505": {
      "fn": "ERC20.name",
      "offset": [
        2260,
        2272
      ],
      "op": "KECCAK256",
      "path": "1"
    },
    "506": {
      "fn": "ERC20.name",
      "offset": [
        2260,
        2272
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "507": {
      "fn": "ERC20.name",
      "offset": [
        2260,
        2272
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "508": {
      "fn": "ERC20.name",
      "offset": [
        2260,
        2272
      ],
      "op": "DUP2",
      "path": "1"
    },
    "509": {
      "fn": "ERC20.name",
      "offset": [
        2260,
        2272
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "510": {
      "fn": "ERC20.name",
      "offset": [
        2260,
        2272
      ],
      "op": "DUP2",
      "path": "1"
    },
    "511": {
      "fn": "ERC20.name",
      "offset": [
        2260,
        2272
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "512": {
      "fn": "ERC20.name",
      "offset": [
        2260,
        2272
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "513": {
      "fn": "ERC20.name",
      "offset": [
        2260,
        2272
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "515": {
      "fn": "ERC20.name",
      "offset": [
        2260,
        2272
      ],
      "op": "ADD",
      "path": "1"
    },
    "516": {
      "fn": "ERC20.name",
      "offset": [
        2260,
        2272
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "517": {
      "fn": "ERC20.name",
      "offset": [
        2260,
        2272
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "519": {
      "fn": "ERC20.name",
      "offset": [
        2260,
        2272
      ],
      "op": "ADD",
      "path": "1"
    },
    "520": {
      "fn": "ERC20.name",
      "offset": [
        2260,
        2272
      ],
      "op": "DUP1",
      "path": "1"
    },
    "521": {
      "fn": "ERC20.name",
      "offset": [
        2260,
        2272
      ],
      "op": "DUP4",
      "path": "1"
    },
    "522": {
      "fn": "ERC20.name",
      "offset": [
        2260,
        2272
      ],
      "op": "GT",
      "path": "1"
    },
    "523": {
      "fn": "ERC20.name",
      "offset": [
        2260,
        2272
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x1FB"
    },
    "526": {
      "fn": "ERC20.name",
      "offset": [
        2260,
        2272
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "527": {
      "fn": "ERC20.name",
      "offset": [
        2260,
        2272
      ],
      "op": "DUP3",
      "path": "1"
    },
    "528": {
      "fn": "ERC20.name",
      "offset": [
        2260,
        2272
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "529": {
      "fn": "ERC20.name",
      "offset": [
        2260,
        2272
      ],
      "op": "SUB",
      "path": "1"
    },
    "530": {
      "fn": "ERC20.name",
      "offset": [
        2260,
        2272
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1F"
    },
    "532": {
      "fn": "ERC20.name",
      "offset": [
        2260,
        2272
      ],
      "op": "AND",
      "path": "1"
    },
    "533": {
      "fn": "ERC20.name",
      "offset": [
        2260,
        2272
      ],
      "op": "DUP3",
      "path": "1"
    },
    "534": {
      "fn": "ERC20.name",
      "offset": [
        2260,
        2272
      ],
      "op": "ADD",
      "path": "1"
    },
    "535": {
      "fn": "ERC20.name",
      "offset": [
        2260,
        2272
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "536": {
      "fn": "ERC20.name",
      "offset": [
        2260,
        2272
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "537": {
      "fn": "ERC20.name",
      "offset": [
        2260,
        2272
      ],
      "op": "POP",
      "path": "1"
    },
    "538": {
      "fn": "ERC20.name",
      "offset": [
        2260,
        2272
      ],
      "op": "POP",
      "path": "1"
    },
    "539": {
      "fn": "ERC20.name",
      "offset": [
        2260,
        2272
      ],
      "op": "POP",
      "path": "1"
    },
    "540": {
      "fn": "ERC20.name",
      "offset": [
        2260,
        2272
      ],
      "op": "POP",
      "path": "1"
    },
    "541": {
      "fn": "ERC20.name",
      "offset": [
        2260,
        2272
      ],
      "op": "POP",
      "path": "1"
    },
    "542": {
      "fn": "ERC20.name",
      "offset": [
        2260,
        2272
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "543": {
      "fn": "ERC20.name",
      "offset": [
        2260,
        2272
      ],
      "op": "POP",
      "path": "1"
    },
    "544": {
      "fn": "ERC20.name",
      "offset": [
        2181,
        2279
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "545": {
      "fn": "ERC20.name",
      "jump": "o",
      "offset": [
        2181,
        2279
      ],
      "op": "JUMP",
      "path": "1"
    },
    "546": {
      "fn": "ERC20.approve",
      "offset": [
        4286,
        4452
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "547": {
      "fn": "ERC20.approve",
      "offset": [
        4369,
        4373
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "549": {
      "fn": "ERC20.approve",
      "offset": [
        4385,
        4424
      ],
      "op": "PUSH2",
      "path": "1",
      "statement": 1,
      "value": "0x236"
    },
    "552": {
      "fn": "ERC20.approve",
      "offset": [
        4394,
        4406
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x22F"
    },
    "555": {
      "fn": "ERC20.approve",
      "offset": [
        4394,
        4404
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x416"
    },
    "558": {
      "fn": "ERC20.approve",
      "jump": "i",
      "offset": [
        4394,
        4406
      ],
      "op": "JUMP",
      "path": "1"
    },
    "559": {
      "fn": "ERC20.approve",
      "offset": [
        4394,
        4406
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "560": {
      "fn": "ERC20.approve",
      "offset": [
        4408,
        4415
      ],
      "op": "DUP5",
      "path": "1"
    },
    "561": {
      "fn": "ERC20.approve",
      "offset": [
        4417,
        4423
      ],
      "op": "DUP5",
      "path": "1"
    },
    "562": {
      "fn": "ERC20.approve",
      "offset": [
        4385,
        4393
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x41A"
    },
    "565": {
      "fn": "ERC20.approve",
      "jump": "i",
      "offset": [
        4385,
        4424
      ],
      "op": "JUMP",
      "path": "1"
    },
    "566": {
      "fn": "ERC20.approve",
      "offset": [
        4385,
        4424
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "567": {
      "op": "POP"
    },
    "568": {
      "fn": "ERC20.approve",
      "offset": [
        4441,
        4445
      ],
      "op": "PUSH1",
      "path": "1",
      "statement": 2,
      "value": "0x1"
    },
    "570": {
      "fn": "ERC20.approve",
      "offset": [
        4286,
        4452
      ],
      "op": "SWAP3",
      "path": "1"
    },
    "571": {
      "fn": "ERC20.approve",
      "offset": [
        4286,
        4452
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "572": {
      "fn": "ERC20.approve",
      "offset": [
        4286,
        4452
      ],
      "op": "POP",
      "path": "1"
    },
    "573": {
      "fn": "ERC20.approve",
      "offset": [
        4286,
        4452
      ],
      "op": "POP",
      "path": "1"
    },
    "574": {
      "fn": "ERC20.approve",
      "jump": "o",
      "offset": [
        4286,
        4452
      ],
      "op": "JUMP",
      "path": "1"
    },
    "575": {
      "fn": "ERC20.totalSupply",
      "offset": [
        3269,
        3375
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "576": {
      "fn": "ERC20.totalSupply",
      "offset": [
        3356,
        3368
      ],
      "op": "PUSH1",
      "path": "1",
      "statement": 3,
      "value": "0x2"
    },
    "578": {
      "fn": "ERC20.totalSupply",
      "offset": [
        3356,
        3368
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "579": {
      "fn": "ERC20.totalSupply",
      "offset": [
        3269,
        3375
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "580": {
      "fn": "ERC20.totalSupply",
      "jump": "o",
      "offset": [
        3269,
        3375
      ],
      "op": "JUMP",
      "path": "1"
    },
    "581": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4919,
        5397
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "582": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5055,
        5059
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "584": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5071,
        5107
      ],
      "op": "PUSH2",
      "path": "1",
      "statement": 4,
      "value": "0x252"
    },
    "587": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5081,
        5087
      ],
      "op": "DUP5",
      "path": "1"
    },
    "588": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5089,
        5098
      ],
      "op": "DUP5",
      "path": "1"
    },
    "589": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5100,
        5106
      ],
      "op": "DUP5",
      "path": "1"
    },
    "590": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5071,
        5080
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x4CE"
    },
    "593": {
      "fn": "ERC20.transferFrom",
      "jump": "i",
      "offset": [
        5071,
        5107
      ],
      "op": "JUMP",
      "path": "1"
    },
    "594": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5071,
        5107
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "595": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "597": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "599": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "601": {
      "op": "SHL"
    },
    "602": {
      "op": "SUB"
    },
    "603": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5145,
        5164
      ],
      "op": "DUP5",
      "path": "1"
    },
    "604": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5145,
        5164
      ],
      "op": "AND",
      "path": "1"
    },
    "605": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5118,
        5142
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "607": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5145,
        5164
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "608": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5145,
        5164
      ],
      "op": "DUP2",
      "path": "1"
    },
    "609": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5145,
        5164
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "610": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5145,
        5156
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "612": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5145,
        5164
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "614": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5145,
        5164
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "615": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5145,
        5164
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "617": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5145,
        5164
      ],
      "op": "DUP2",
      "path": "1"
    },
    "618": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5145,
        5164
      ],
      "op": "KECCAK256",
      "path": "1"
    },
    "619": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5118,
        5142
      ],
      "op": "DUP2",
      "path": "1"
    },
    "620": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5165,
        5177
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x273"
    },
    "623": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5165,
        5175
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x416"
    },
    "626": {
      "fn": "ERC20.transferFrom",
      "jump": "i",
      "offset": [
        5165,
        5177
      ],
      "op": "JUMP",
      "path": "1"
    },
    "627": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5165,
        5177
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "628": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "630": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "632": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "634": {
      "op": "SHL"
    },
    "635": {
      "op": "SUB"
    },
    "636": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5145,
        5178
      ],
      "op": "AND",
      "path": "1"
    },
    "637": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "639": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "641": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "643": {
      "op": "SHL"
    },
    "644": {
      "op": "SUB"
    },
    "645": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5145,
        5178
      ],
      "op": "AND",
      "path": "1"
    },
    "646": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5145,
        5178
      ],
      "op": "DUP2",
      "path": "1"
    },
    "647": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5145,
        5178
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "648": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5145,
        5178
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "650": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5145,
        5178
      ],
      "op": "ADD",
      "path": "1"
    },
    "651": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5145,
        5178
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "652": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5145,
        5178
      ],
      "op": "DUP2",
      "path": "1"
    },
    "653": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5145,
        5178
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "654": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5145,
        5178
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "656": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5145,
        5178
      ],
      "op": "ADD",
      "path": "1"
    },
    "657": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5145,
        5178
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "659": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5145,
        5178
      ],
      "op": "KECCAK256",
      "path": "1"
    },
    "660": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5145,
        5178
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "661": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5118,
        5178
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "662": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5118,
        5178
      ],
      "op": "POP",
      "path": "1"
    },
    "663": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5216,
        5222
      ],
      "op": "DUP3",
      "path": "1",
      "statement": 5
    },
    "664": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5196,
        5212
      ],
      "op": "DUP2",
      "path": "1"
    },
    "665": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5196,
        5222
      ],
      "op": "LT",
      "path": "1"
    },
    "666": {
      "branch": 30,
      "fn": "ERC20.transferFrom",
      "offset": [
        5196,
        5222
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "667": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5188,
        5267
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x2BF"
    },
    "670": {
      "branch": 30,
      "fn": "ERC20.transferFrom",
      "offset": [
        5188,
        5267
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "671": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5188,
        5267
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "673": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5188,
        5267
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "674": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "678": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "680": {
      "op": "SHL"
    },
    "681": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5188,
        5267
      ],
      "op": "DUP2",
      "path": "1"
    },
    "682": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5188,
        5267
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "683": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5188,
        5267
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "685": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5188,
        5267
      ],
      "op": "ADD",
      "path": "1"
    },
    "686": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5188,
        5267
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x2B6"
    },
    "689": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5188,
        5267
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "690": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5188,
        5267
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x7F4"
    },
    "693": {
      "fn": "ERC20.transferFrom",
      "jump": "i",
      "offset": [
        5188,
        5267
      ],
      "op": "JUMP",
      "path": "1"
    },
    "694": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5188,
        5267
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "695": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5188,
        5267
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "697": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5188,
        5267
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "698": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5188,
        5267
      ],
      "op": "DUP1",
      "path": "1"
    },
    "699": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5188,
        5267
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "700": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5188,
        5267
      ],
      "op": "SUB",
      "path": "1"
    },
    "701": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5188,
        5267
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "702": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5188,
        5267
      ],
      "op": "REVERT",
      "optimizer_revert": true,
      "path": "1"
    },
    "703": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5188,
        5267
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "704": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5301,
        5358
      ],
      "op": "PUSH2",
      "path": "1",
      "statement": 6,
      "value": "0x2D3"
    },
    "707": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5310,
        5316
      ],
      "op": "DUP6",
      "path": "1"
    },
    "708": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5318,
        5330
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x2CB"
    },
    "711": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5318,
        5328
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x416"
    },
    "714": {
      "fn": "ERC20.transferFrom",
      "jump": "i",
      "offset": [
        5318,
        5330
      ],
      "op": "JUMP",
      "path": "1"
    },
    "715": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5318,
        5330
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "716": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5351,
        5357
      ],
      "op": "DUP6",
      "path": "1"
    },
    "717": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5332,
        5348
      ],
      "op": "DUP5",
      "path": "1"
    },
    "718": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5332,
        5357
      ],
      "op": "SUB",
      "path": "1"
    },
    "719": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5301,
        5309
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x41A"
    },
    "722": {
      "fn": "ERC20.transferFrom",
      "jump": "i",
      "offset": [
        5301,
        5358
      ],
      "op": "JUMP",
      "path": "1"
    },
    "723": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5301,
        5358
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "724": {
      "op": "POP"
    },
    "725": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5386,
        5390
      ],
      "op": "PUSH1",
      "path": "1",
      "statement": 7,
      "value": "0x1"
    },
    "727": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5386,
        5390
      ],
      "op": "SWAP5",
      "path": "1"
    },
    "728": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4919,
        5397
      ],
      "op": "SWAP4",
      "path": "1"
    },
    "729": {
      "op": "POP"
    },
    "730": {
      "op": "POP"
    },
    "731": {
      "op": "POP"
    },
    "732": {
      "op": "POP"
    },
    "733": {
      "fn": "ERC20.transferFrom",
      "jump": "o",
      "offset": [
        4919,
        5397
      ],
      "op": "JUMP",
      "path": "1"
    },
    "734": {
      "fn": "ERC20.decimals",
      "offset": [
        3118,
        3209
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "735": {
      "fn": "ERC20.decimals",
      "offset": [
        3200,
        3202
      ],
      "op": "PUSH1",
      "path": "1",
      "statement": 8,
      "value": "0x12"
    },
    "737": {
      "fn": "ERC20.decimals",
      "offset": [
        3118,
        3209
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "738": {
      "fn": "ERC20.decimals",
      "jump": "o",
      "offset": [
        3118,
        3209
      ],
      "op": "JUMP",
      "path": "1"
    },
    "739": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5792,
        6004
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "740": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5880,
        5884
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "742": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5896,
        5976
      ],
      "op": "PUSH2",
      "path": "1",
      "statement": 9,
      "value": "0x236"
    },
    "745": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5905,
        5917
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x2F0"
    },
    "748": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5905,
        5915
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x416"
    },
    "751": {
      "fn": "ERC20.increaseAllowance",
      "jump": "i",
      "offset": [
        5905,
        5917
      ],
      "op": "JUMP",
      "path": "1"
    },
    "752": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5905,
        5917
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "753": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5919,
        5926
      ],
      "op": "DUP5",
      "path": "1"
    },
    "754": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5965,
        5975
      ],
      "op": "DUP5",
      "path": "1"
    },
    "755": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5928,
        5939
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "757": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5928,
        5953
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "759": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5940,
        5952
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x2FE"
    },
    "762": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5940,
        5950
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x416"
    },
    "765": {
      "fn": "ERC20.increaseAllowance",
      "jump": "i",
      "offset": [
        5940,
        5952
      ],
      "op": "JUMP",
      "path": "1"
    },
    "766": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5940,
        5952
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "767": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "769": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "771": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "773": {
      "op": "SHL"
    },
    "774": {
      "op": "SUB"
    },
    "775": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5928,
        5953
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "776": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5928,
        5953
      ],
      "op": "DUP2",
      "path": "1"
    },
    "777": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5928,
        5953
      ],
      "op": "AND",
      "path": "1"
    },
    "778": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5928,
        5953
      ],
      "op": "DUP3",
      "path": "1"
    },
    "779": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5928,
        5953
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "780": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5928,
        5953
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "782": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5928,
        5953
      ],
      "op": "DUP1",
      "path": "1"
    },
    "783": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5928,
        5953
      ],
      "op": "DUP4",
      "path": "1"
    },
    "784": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5928,
        5953
      ],
      "op": "ADD",
      "path": "1"
    },
    "785": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5928,
        5953
      ],
      "op": "SWAP4",
      "path": "1"
    },
    "786": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5928,
        5953
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "787": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5928,
        5953
      ],
      "op": "SWAP4",
      "path": "1"
    },
    "788": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5928,
        5953
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "789": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5928,
        5953
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "791": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5928,
        5953
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "792": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5928,
        5953
      ],
      "op": "DUP3",
      "path": "1"
    },
    "793": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5928,
        5953
      ],
      "op": "ADD",
      "path": "1"
    },
    "794": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "796": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5928,
        5953
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "797": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5928,
        5953
      ],
      "op": "DUP2",
      "path": "1"
    },
    "798": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5928,
        5953
      ],
      "op": "KECCAK256",
      "path": "1"
    },
    "799": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5928,
        5962
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "800": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5928,
        5962
      ],
      "op": "DUP12",
      "path": "1"
    },
    "801": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5928,
        5962
      ],
      "op": "AND",
      "path": "1"
    },
    "802": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5928,
        5962
      ],
      "op": "DUP2",
      "path": "1"
    },
    "803": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5928,
        5962
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "804": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5928,
        5962
      ],
      "op": "SWAP3",
      "path": "1"
    },
    "805": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5928,
        5962
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "806": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5928,
        5962
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "807": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5928,
        5962
      ],
      "op": "KECCAK256",
      "path": "1"
    },
    "808": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5928,
        5962
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "809": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5928,
        5975
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x332"
    },
    "812": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5928,
        5975
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "813": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5928,
        5975
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "814": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5928,
        5975
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x921"
    },
    "817": {
      "fn": "ERC20.increaseAllowance",
      "jump": "i",
      "offset": [
        5928,
        5975
      ],
      "op": "JUMP",
      "path": "1"
    },
    "818": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5928,
        5975
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "819": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5896,
        5904
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x41A"
    },
    "822": {
      "fn": "ERC20.increaseAllowance",
      "jump": "i",
      "offset": [
        5896,
        5976
      ],
      "op": "JUMP",
      "path": "1"
    },
    "823": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3433,
        3558
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "824": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "826": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "828": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "830": {
      "op": "SHL"
    },
    "831": {
      "op": "SUB"
    },
    "832": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3533,
        3551
      ],
      "op": "DUP2",
      "path": "1",
      "statement": 10
    },
    "833": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3533,
        3551
      ],
      "op": "AND",
      "path": "1"
    },
    "834": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3507,
        3514
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "836": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3533,
        3551
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "837": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3533,
        3551
      ],
      "op": "DUP2",
      "path": "1"
    },
    "838": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3533,
        3551
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "839": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3533,
        3551
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "841": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3533,
        3551
      ],
      "op": "DUP2",
      "path": "1"
    },
    "842": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3533,
        3551
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "843": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3533,
        3551
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "844": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3533,
        3551
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "846": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3533,
        3551
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "847": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3533,
        3551
      ],
      "op": "KECCAK256",
      "path": "1"
    },
    "848": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3533,
        3551
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "849": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3433,
        3558
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "850": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3433,
        3558
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "851": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3433,
        3558
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "852": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3433,
        3558
      ],
      "op": "POP",
      "path": "1"
    },
    "853": {
      "fn": "ERC20.balanceOf",
      "jump": "o",
      "offset": [
        3433,
        3558
      ],
      "op": "JUMP",
      "path": "1"
    },
    "854": {
      "fn": "ERC20.symbol",
      "offset": [
        2392,
        2494
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "855": {
      "fn": "ERC20.symbol",
      "offset": [
        2448,
        2461
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x60"
    },
    "857": {
      "fn": "ERC20.symbol",
      "offset": [
        2480,
        2487
      ],
      "op": "PUSH1",
      "path": "1",
      "statement": 11,
      "value": "0x4"
    },
    "859": {
      "fn": "ERC20.symbol",
      "offset": [
        2473,
        2487
      ],
      "op": "DUP1",
      "path": "1"
    },
    "860": {
      "fn": "ERC20.symbol",
      "offset": [
        2473,
        2487
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "861": {
      "fn": "ERC20.symbol",
      "offset": [
        2473,
        2487
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x19F"
    },
    "864": {
      "fn": "ERC20.symbol",
      "offset": [
        2473,
        2487
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "865": {
      "fn": "ERC20.symbol",
      "offset": [
        2473,
        2487
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x945"
    },
    "868": {
      "fn": "ERC20.symbol",
      "jump": "i",
      "offset": [
        2473,
        2487
      ],
      "op": "JUMP",
      "path": "1"
    },
    "869": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6491,
        6896
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "870": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6584,
        6588
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "872": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6600,
        6624
      ],
      "op": "DUP1",
      "path": "1"
    },
    "873": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6627,
        6638
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "875": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6627,
        6652
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "877": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6639,
        6651
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x374"
    },
    "880": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6639,
        6649
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x416"
    },
    "883": {
      "fn": "ERC20.decreaseAllowance",
      "jump": "i",
      "offset": [
        6639,
        6651
      ],
      "op": "JUMP",
      "path": "1"
    },
    "884": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6639,
        6651
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "885": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "887": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "889": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "891": {
      "op": "SHL"
    },
    "892": {
      "op": "SUB"
    },
    "893": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6627,
        6652
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "894": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6627,
        6652
      ],
      "op": "DUP2",
      "path": "1"
    },
    "895": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6627,
        6652
      ],
      "op": "AND",
      "path": "1"
    },
    "896": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6627,
        6652
      ],
      "op": "DUP3",
      "path": "1"
    },
    "897": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6627,
        6652
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "898": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6627,
        6652
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "900": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6627,
        6652
      ],
      "op": "DUP1",
      "path": "1"
    },
    "901": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6627,
        6652
      ],
      "op": "DUP4",
      "path": "1"
    },
    "902": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6627,
        6652
      ],
      "op": "ADD",
      "path": "1"
    },
    "903": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6627,
        6652
      ],
      "op": "SWAP4",
      "path": "1"
    },
    "904": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6627,
        6652
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "905": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6627,
        6652
      ],
      "op": "SWAP4",
      "path": "1"
    },
    "906": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6627,
        6652
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "907": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6627,
        6652
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "909": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6627,
        6652
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "910": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6627,
        6652
      ],
      "op": "DUP3",
      "path": "1"
    },
    "911": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6627,
        6652
      ],
      "op": "ADD",
      "path": "1"
    },
    "912": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "914": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6627,
        6652
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "915": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6627,
        6652
      ],
      "op": "DUP2",
      "path": "1"
    },
    "916": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6627,
        6652
      ],
      "op": "KECCAK256",
      "path": "1"
    },
    "917": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6627,
        6661
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "918": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6627,
        6661
      ],
      "op": "DUP9",
      "path": "1"
    },
    "919": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6627,
        6661
      ],
      "op": "AND",
      "path": "1"
    },
    "920": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6627,
        6661
      ],
      "op": "DUP2",
      "path": "1"
    },
    "921": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6627,
        6661
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "922": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6627,
        6661
      ],
      "op": "SWAP3",
      "path": "1"
    },
    "923": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6627,
        6661
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "924": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6627,
        6661
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "925": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6627,
        6661
      ],
      "op": "KECCAK256",
      "path": "1"
    },
    "926": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6627,
        6661
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "927": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6627,
        6661
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "928": {
      "op": "POP"
    },
    "929": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6679,
        6714
      ],
      "op": "DUP3",
      "path": "1",
      "statement": 12
    },
    "930": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6679,
        6714
      ],
      "op": "DUP2",
      "path": "1"
    },
    "931": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6679,
        6714
      ],
      "op": "LT",
      "path": "1"
    },
    "932": {
      "branch": 31,
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6679,
        6714
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "933": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6671,
        6756
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x3C0"
    },
    "936": {
      "branch": 31,
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6671,
        6756
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "937": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6671,
        6756
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "939": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6671,
        6756
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "940": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "944": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "946": {
      "op": "SHL"
    },
    "947": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6671,
        6756
      ],
      "op": "DUP2",
      "path": "1"
    },
    "948": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6671,
        6756
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "949": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6671,
        6756
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "951": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6671,
        6756
      ],
      "op": "ADD",
      "path": "1"
    },
    "952": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6671,
        6756
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x2B6"
    },
    "955": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6671,
        6756
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "956": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6671,
        6756
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x8C5"
    },
    "959": {
      "fn": "ERC20.decreaseAllowance",
      "jump": "i",
      "offset": [
        6671,
        6756
      ],
      "op": "JUMP",
      "path": "1"
    },
    "960": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6671,
        6756
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "961": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6790,
        6857
      ],
      "op": "PUSH2",
      "path": "1",
      "statement": 13,
      "value": "0x3D4"
    },
    "964": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6799,
        6811
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x3CB"
    },
    "967": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6799,
        6809
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x416"
    },
    "970": {
      "fn": "ERC20.decreaseAllowance",
      "jump": "i",
      "offset": [
        6799,
        6811
      ],
      "op": "JUMP",
      "path": "1"
    },
    "971": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6799,
        6811
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "972": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6813,
        6820
      ],
      "op": "DUP6",
      "path": "1"
    },
    "973": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6841,
        6856
      ],
      "op": "DUP6",
      "path": "1"
    },
    "974": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6822,
        6838
      ],
      "op": "DUP5",
      "path": "1"
    },
    "975": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6822,
        6856
      ],
      "op": "SUB",
      "path": "1"
    },
    "976": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6790,
        6798
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x41A"
    },
    "979": {
      "fn": "ERC20.decreaseAllowance",
      "jump": "i",
      "offset": [
        6790,
        6857
      ],
      "op": "JUMP",
      "path": "1"
    },
    "980": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6790,
        6857
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "981": {
      "op": "POP"
    },
    "982": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6885,
        6889
      ],
      "op": "PUSH1",
      "path": "1",
      "statement": 14,
      "value": "0x1"
    },
    "984": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6885,
        6889
      ],
      "op": "SWAP4",
      "path": "1"
    },
    "985": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6491,
        6896
      ],
      "op": "SWAP3",
      "path": "1"
    },
    "986": {
      "op": "POP"
    },
    "987": {
      "op": "POP"
    },
    "988": {
      "op": "POP"
    },
    "989": {
      "fn": "ERC20.decreaseAllowance",
      "jump": "o",
      "offset": [
        6491,
        6896
      ],
      "op": "JUMP",
      "path": "1"
    },
    "990": {
      "fn": "ERC20.transfer",
      "offset": [
        3761,
        3941
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "991": {
      "fn": "ERC20.transfer",
      "offset": [
        3862,
        3866
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "993": {
      "fn": "ERC20.transfer",
      "offset": [
        3878,
        3913
      ],
      "op": "PUSH2",
      "path": "1",
      "statement": 15,
      "value": "0x3D4"
    },
    "996": {
      "fn": "ERC20.transfer",
      "offset": [
        3888,
        3893
      ],
      "op": "DUP5",
      "path": "1"
    },
    "997": {
      "fn": "ERC20.transfer",
      "offset": [
        3895,
        3904
      ],
      "op": "DUP5",
      "path": "1"
    },
    "998": {
      "fn": "ERC20.transfer",
      "offset": [
        3906,
        3912
      ],
      "op": "DUP5",
      "path": "1"
    },
    "999": {
      "fn": "ERC20.transfer",
      "offset": [
        3878,
        3887
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x4CE"
    },
    "1002": {
      "fn": "ERC20.transfer",
      "jump": "i",
      "offset": [
        3878,
        3913
      ],
      "op": "JUMP",
      "path": "1"
    },
    "1003": {
      "fn": "ERC20.allowance",
      "offset": [
        3999,
        4148
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1004": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1006": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1008": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1010": {
      "op": "SHL"
    },
    "1011": {
      "op": "SUB"
    },
    "1012": {
      "fn": "ERC20.allowance",
      "offset": [
        4114,
        4132
      ],
      "op": "SWAP2",
      "path": "1",
      "statement": 16
    },
    "1013": {
      "fn": "ERC20.allowance",
      "offset": [
        4114,
        4132
      ],
      "op": "DUP3",
      "path": "1"
    },
    "1014": {
      "fn": "ERC20.allowance",
      "offset": [
        4114,
        4132
      ],
      "op": "AND",
      "path": "1"
    },
    "1015": {
      "fn": "ERC20.allowance",
      "offset": [
        4088,
        4095
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "1017": {
      "fn": "ERC20.allowance",
      "offset": [
        4114,
        4132
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1018": {
      "fn": "ERC20.allowance",
      "offset": [
        4114,
        4132
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1019": {
      "fn": "ERC20.allowance",
      "offset": [
        4114,
        4132
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1020": {
      "fn": "ERC20.allowance",
      "offset": [
        4114,
        4125
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "1022": {
      "fn": "ERC20.allowance",
      "offset": [
        4114,
        4132
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "1024": {
      "fn": "ERC20.allowance",
      "offset": [
        4114,
        4132
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1025": {
      "fn": "ERC20.allowance",
      "offset": [
        4114,
        4132
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1026": {
      "fn": "ERC20.allowance",
      "offset": [
        4114,
        4132
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1027": {
      "fn": "ERC20.allowance",
      "offset": [
        4114,
        4132
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "1029": {
      "fn": "ERC20.allowance",
      "offset": [
        4114,
        4132
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1030": {
      "fn": "ERC20.allowance",
      "offset": [
        4114,
        4132
      ],
      "op": "DUP4",
      "path": "1"
    },
    "1031": {
      "fn": "ERC20.allowance",
      "offset": [
        4114,
        4132
      ],
      "op": "KECCAK256",
      "path": "1"
    },
    "1032": {
      "fn": "ERC20.allowance",
      "offset": [
        4114,
        4141
      ],
      "op": "SWAP4",
      "path": "1"
    },
    "1033": {
      "fn": "ERC20.allowance",
      "offset": [
        4114,
        4141
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1034": {
      "fn": "ERC20.allowance",
      "offset": [
        4114,
        4141
      ],
      "op": "SWAP5",
      "path": "1"
    },
    "1035": {
      "fn": "ERC20.allowance",
      "offset": [
        4114,
        4141
      ],
      "op": "AND",
      "path": "1"
    },
    "1036": {
      "fn": "ERC20.allowance",
      "offset": [
        4114,
        4141
      ],
      "op": "DUP3",
      "path": "1"
    },
    "1037": {
      "fn": "ERC20.allowance",
      "offset": [
        4114,
        4141
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1038": {
      "fn": "ERC20.allowance",
      "offset": [
        4114,
        4141
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "1039": {
      "fn": "ERC20.allowance",
      "offset": [
        4114,
        4141
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1040": {
      "fn": "ERC20.allowance",
      "offset": [
        4114,
        4141
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "1041": {
      "fn": "ERC20.allowance",
      "offset": [
        4114,
        4141
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1042": {
      "fn": "ERC20.allowance",
      "offset": [
        4114,
        4141
      ],
      "op": "KECCAK256",
      "path": "1"
    },
    "1043": {
      "fn": "ERC20.allowance",
      "offset": [
        4114,
        4141
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "1044": {
      "fn": "ERC20.allowance",
      "offset": [
        4114,
        4141
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1045": {
      "fn": "ERC20.allowance",
      "jump": "o",
      "offset": [
        3999,
        4148
      ],
      "op": "JUMP",
      "path": "1"
    },
    "1046": {
      "fn": "Context._msgSender",
      "offset": [
        587,
        683
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "1047": {
      "fn": "Context._msgSender",
      "offset": [
        666,
        676
      ],
      "op": "CALLER",
      "path": "4",
      "statement": 17
    },
    "1048": {
      "fn": "Context._msgSender",
      "offset": [
        587,
        683
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "1049": {
      "fn": "Context._msgSender",
      "jump": "o",
      "offset": [
        587,
        683
      ],
      "op": "JUMP",
      "path": "4"
    },
    "1050": {
      "fn": "ERC20._approve",
      "offset": [
        10067,
        10437
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1051": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1053": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1055": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1057": {
      "op": "SHL"
    },
    "1058": {
      "op": "SUB"
    },
    "1059": {
      "fn": "ERC20._approve",
      "offset": [
        10198,
        10217
      ],
      "op": "DUP4",
      "path": "1",
      "statement": 18
    },
    "1060": {
      "branch": 32,
      "fn": "ERC20._approve",
      "offset": [
        10198,
        10217
      ],
      "op": "AND",
      "path": "1"
    },
    "1061": {
      "fn": "ERC20._approve",
      "offset": [
        10190,
        10258
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x440"
    },
    "1064": {
      "branch": 32,
      "fn": "ERC20._approve",
      "offset": [
        10190,
        10258
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "1065": {
      "fn": "ERC20._approve",
      "offset": [
        10190,
        10258
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "1067": {
      "fn": "ERC20._approve",
      "offset": [
        10190,
        10258
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "1068": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1072": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1074": {
      "op": "SHL"
    },
    "1075": {
      "fn": "ERC20._approve",
      "offset": [
        10190,
        10258
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1076": {
      "fn": "ERC20._approve",
      "offset": [
        10190,
        10258
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1077": {
      "fn": "ERC20._approve",
      "offset": [
        10190,
        10258
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "1079": {
      "fn": "ERC20._approve",
      "offset": [
        10190,
        10258
      ],
      "op": "ADD",
      "path": "1"
    },
    "1080": {
      "fn": "ERC20._approve",
      "offset": [
        10190,
        10258
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x2B6"
    },
    "1083": {
      "fn": "ERC20._approve",
      "offset": [
        10190,
        10258
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1084": {
      "fn": "ERC20._approve",
      "offset": [
        10190,
        10258
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x881"
    },
    "1087": {
      "fn": "ERC20._approve",
      "jump": "i",
      "offset": [
        10190,
        10258
      ],
      "op": "JUMP",
      "path": "1"
    },
    "1088": {
      "fn": "ERC20._approve",
      "offset": [
        10190,
        10258
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1089": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1091": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1093": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1095": {
      "op": "SHL"
    },
    "1096": {
      "op": "SUB"
    },
    "1097": {
      "fn": "ERC20._approve",
      "offset": [
        10276,
        10297
      ],
      "op": "DUP3",
      "path": "1",
      "statement": 19
    },
    "1098": {
      "branch": 33,
      "fn": "ERC20._approve",
      "offset": [
        10276,
        10297
      ],
      "op": "AND",
      "path": "1"
    },
    "1099": {
      "fn": "ERC20._approve",
      "offset": [
        10268,
        10336
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x466"
    },
    "1102": {
      "branch": 33,
      "fn": "ERC20._approve",
      "offset": [
        10268,
        10336
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "1103": {
      "fn": "ERC20._approve",
      "offset": [
        10268,
        10336
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "1105": {
      "fn": "ERC20._approve",
      "offset": [
        10268,
        10336
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "1106": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1110": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1112": {
      "op": "SHL"
    },
    "1113": {
      "fn": "ERC20._approve",
      "offset": [
        10268,
        10336
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1114": {
      "fn": "ERC20._approve",
      "offset": [
        10268,
        10336
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1115": {
      "fn": "ERC20._approve",
      "offset": [
        10268,
        10336
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "1117": {
      "fn": "ERC20._approve",
      "offset": [
        10268,
        10336
      ],
      "op": "ADD",
      "path": "1"
    },
    "1118": {
      "fn": "ERC20._approve",
      "offset": [
        10268,
        10336
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x2B6"
    },
    "1121": {
      "fn": "ERC20._approve",
      "offset": [
        10268,
        10336
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1122": {
      "fn": "ERC20._approve",
      "offset": [
        10268,
        10336
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x76C"
    },
    "1125": {
      "fn": "ERC20._approve",
      "jump": "i",
      "offset": [
        10268,
        10336
      ],
      "op": "JUMP",
      "path": "1"
    },
    "1126": {
      "fn": "ERC20._approve",
      "offset": [
        10268,
        10336
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1127": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1129": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1131": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1133": {
      "op": "SHL"
    },
    "1134": {
      "op": "SUB"
    },
    "1135": {
      "fn": "ERC20._approve",
      "offset": [
        10347,
        10365
      ],
      "op": "DUP1",
      "path": "1",
      "statement": 20
    },
    "1136": {
      "fn": "ERC20._approve",
      "offset": [
        10347,
        10365
      ],
      "op": "DUP5",
      "path": "1"
    },
    "1137": {
      "fn": "ERC20._approve",
      "offset": [
        10347,
        10365
      ],
      "op": "AND",
      "path": "1"
    },
    "1138": {
      "fn": "ERC20._approve",
      "offset": [
        10347,
        10365
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "1140": {
      "fn": "ERC20._approve",
      "offset": [
        10347,
        10365
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1141": {
      "fn": "ERC20._approve",
      "offset": [
        10347,
        10365
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1142": {
      "fn": "ERC20._approve",
      "offset": [
        10347,
        10365
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1143": {
      "fn": "ERC20._approve",
      "offset": [
        10347,
        10358
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "1145": {
      "fn": "ERC20._approve",
      "offset": [
        10347,
        10365
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "1147": {
      "fn": "ERC20._approve",
      "offset": [
        10347,
        10365
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1148": {
      "fn": "ERC20._approve",
      "offset": [
        10347,
        10365
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1149": {
      "fn": "ERC20._approve",
      "offset": [
        10347,
        10365
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1150": {
      "fn": "ERC20._approve",
      "offset": [
        10347,
        10365
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "1152": {
      "fn": "ERC20._approve",
      "offset": [
        10347,
        10365
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1153": {
      "fn": "ERC20._approve",
      "offset": [
        10347,
        10365
      ],
      "op": "DUP4",
      "path": "1"
    },
    "1154": {
      "fn": "ERC20._approve",
      "offset": [
        10347,
        10365
      ],
      "op": "KECCAK256",
      "path": "1"
    },
    "1155": {
      "fn": "ERC20._approve",
      "offset": [
        10347,
        10374
      ],
      "op": "SWAP5",
      "path": "1"
    },
    "1156": {
      "fn": "ERC20._approve",
      "offset": [
        10347,
        10374
      ],
      "op": "DUP8",
      "path": "1"
    },
    "1157": {
      "fn": "ERC20._approve",
      "offset": [
        10347,
        10374
      ],
      "op": "AND",
      "path": "1"
    },
    "1158": {
      "fn": "ERC20._approve",
      "offset": [
        10347,
        10374
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1159": {
      "fn": "ERC20._approve",
      "offset": [
        10347,
        10374
      ],
      "op": "DUP5",
      "path": "1"
    },
    "1160": {
      "fn": "ERC20._approve",
      "offset": [
        10347,
        10374
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1161": {
      "fn": "ERC20._approve",
      "offset": [
        10347,
        10374
      ],
      "op": "SWAP5",
      "path": "1"
    },
    "1162": {
      "fn": "ERC20._approve",
      "offset": [
        10347,
        10374
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1163": {
      "fn": "ERC20._approve",
      "offset": [
        10347,
        10374
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "1164": {
      "fn": "ERC20._approve",
      "offset": [
        10347,
        10374
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1165": {
      "fn": "ERC20._approve",
      "offset": [
        10347,
        10374
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1166": {
      "fn": "ERC20._approve",
      "offset": [
        10347,
        10374
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1167": {
      "fn": "ERC20._approve",
      "offset": [
        10347,
        10374
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1168": {
      "fn": "ERC20._approve",
      "offset": [
        10347,
        10374
      ],
      "op": "KECCAK256",
      "path": "1"
    },
    "1169": {
      "fn": "ERC20._approve",
      "offset": [
        10347,
        10383
      ],
      "op": "DUP5",
      "path": "1"
    },
    "1170": {
      "fn": "ERC20._approve",
      "offset": [
        10347,
        10383
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1171": {
      "fn": "ERC20._approve",
      "offset": [
        10347,
        10383
      ],
      "op": "SSTORE",
      "path": "1"
    },
    "1172": {
      "fn": "ERC20._approve",
      "offset": [
        10398,
        10430
      ],
      "op": "MLOAD",
      "path": "1",
      "statement": 21
    },
    "1173": {
      "fn": "ERC20._approve",
      "offset": [
        10398,
        10430
      ],
      "op": "PUSH32",
      "path": "1",
      "value": "0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925"
    },
    "1206": {
      "fn": "ERC20._approve",
      "offset": [
        10398,
        10430
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1207": {
      "fn": "ERC20._approve",
      "offset": [
        10398,
        10430
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x4C1"
    },
    "1210": {
      "fn": "ERC20._approve",
      "offset": [
        10398,
        10430
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1211": {
      "fn": "ERC20._approve",
      "offset": [
        10377,
        10383
      ],
      "op": "DUP6",
      "path": "1"
    },
    "1212": {
      "fn": "ERC20._approve",
      "offset": [
        10377,
        10383
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1213": {
      "fn": "ERC20._approve",
      "offset": [
        10398,
        10430
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x90A"
    },
    "1216": {
      "fn": "ERC20._approve",
      "jump": "i",
      "offset": [
        10398,
        10430
      ],
      "op": "JUMP",
      "path": "1"
    },
    "1217": {
      "fn": "ERC20._approve",
      "offset": [
        10398,
        10430
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1218": {
      "fn": "ERC20._approve",
      "offset": [
        10398,
        10430
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "1220": {
      "fn": "ERC20._approve",
      "offset": [
        10398,
        10430
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "1221": {
      "fn": "ERC20._approve",
      "offset": [
        10398,
        10430
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1222": {
      "fn": "ERC20._approve",
      "offset": [
        10398,
        10430
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "1223": {
      "fn": "ERC20._approve",
      "offset": [
        10398,
        10430
      ],
      "op": "SUB",
      "path": "1"
    },
    "1224": {
      "fn": "ERC20._approve",
      "offset": [
        10398,
        10430
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1225": {
      "fn": "ERC20._approve",
      "offset": [
        10398,
        10430
      ],
      "op": "LOG3",
      "path": "1"
    },
    "1226": {
      "fn": "ERC20._approve",
      "offset": [
        10067,
        10437
      ],
      "op": "POP",
      "path": "1"
    },
    "1227": {
      "fn": "ERC20._approve",
      "offset": [
        10067,
        10437
      ],
      "op": "POP",
      "path": "1"
    },
    "1228": {
      "fn": "ERC20._approve",
      "offset": [
        10067,
        10437
      ],
      "op": "POP",
      "path": "1"
    },
    "1229": {
      "fn": "ERC20._approve",
      "jump": "o",
      "offset": [
        10067,
        10437
      ],
      "op": "JUMP",
      "path": "1"
    },
    "1230": {
      "fn": "ERC20._transfer",
      "offset": [
        7370,
        8083
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1231": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1233": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1235": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1237": {
      "op": "SHL"
    },
    "1238": {
      "op": "SUB"
    },
    "1239": {
      "fn": "ERC20._transfer",
      "offset": [
        7505,
        7525
      ],
      "op": "DUP4",
      "path": "1",
      "statement": 22
    },
    "1240": {
      "branch": 34,
      "fn": "ERC20._transfer",
      "offset": [
        7505,
        7525
      ],
      "op": "AND",
      "path": "1"
    },
    "1241": {
      "fn": "ERC20._transfer",
      "offset": [
        7497,
        7567
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x4F4"
    },
    "1244": {
      "branch": 34,
      "fn": "ERC20._transfer",
      "offset": [
        7497,
        7567
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "1245": {
      "fn": "ERC20._transfer",
      "offset": [
        7497,
        7567
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "1247": {
      "fn": "ERC20._transfer",
      "offset": [
        7497,
        7567
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "1248": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1252": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1254": {
      "op": "SHL"
    },
    "1255": {
      "fn": "ERC20._transfer",
      "offset": [
        7497,
        7567
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1256": {
      "fn": "ERC20._transfer",
      "offset": [
        7497,
        7567
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1257": {
      "fn": "ERC20._transfer",
      "offset": [
        7497,
        7567
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "1259": {
      "fn": "ERC20._transfer",
      "offset": [
        7497,
        7567
      ],
      "op": "ADD",
      "path": "1"
    },
    "1260": {
      "fn": "ERC20._transfer",
      "offset": [
        7497,
        7567
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x2B6"
    },
    "1263": {
      "fn": "ERC20._transfer",
      "offset": [
        7497,
        7567
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1264": {
      "fn": "ERC20._transfer",
      "offset": [
        7497,
        7567
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x83C"
    },
    "1267": {
      "fn": "ERC20._transfer",
      "jump": "i",
      "offset": [
        7497,
        7567
      ],
      "op": "JUMP",
      "path": "1"
    },
    "1268": {
      "fn": "ERC20._transfer",
      "offset": [
        7497,
        7567
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1269": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1271": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1273": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1275": {
      "op": "SHL"
    },
    "1276": {
      "op": "SUB"
    },
    "1277": {
      "fn": "ERC20._transfer",
      "offset": [
        7585,
        7608
      ],
      "op": "DUP3",
      "path": "1",
      "statement": 23
    },
    "1278": {
      "branch": 35,
      "fn": "ERC20._transfer",
      "offset": [
        7585,
        7608
      ],
      "op": "AND",
      "path": "1"
    },
    "1279": {
      "fn": "ERC20._transfer",
      "offset": [
        7577,
        7648
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x51A"
    },
    "1282": {
      "branch": 35,
      "fn": "ERC20._transfer",
      "offset": [
        7577,
        7648
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "1283": {
      "fn": "ERC20._transfer",
      "offset": [
        7577,
        7648
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "1285": {
      "fn": "ERC20._transfer",
      "offset": [
        7577,
        7648
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "1286": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1290": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1292": {
      "op": "SHL"
    },
    "1293": {
      "fn": "ERC20._transfer",
      "offset": [
        7577,
        7648
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1294": {
      "fn": "ERC20._transfer",
      "offset": [
        7577,
        7648
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1295": {
      "fn": "ERC20._transfer",
      "offset": [
        7577,
        7648
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "1297": {
      "fn": "ERC20._transfer",
      "offset": [
        7577,
        7648
      ],
      "op": "ADD",
      "path": "1"
    },
    "1298": {
      "fn": "ERC20._transfer",
      "offset": [
        7577,
        7648
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x2B6"
    },
    "1301": {
      "fn": "ERC20._transfer",
      "offset": [
        7577,
        7648
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1302": {
      "fn": "ERC20._transfer",
      "offset": [
        7577,
        7648
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x729"
    },
    "1305": {
      "fn": "ERC20._transfer",
      "jump": "i",
      "offset": [
        7577,
        7648
      ],
      "op": "JUMP",
      "path": "1"
    },
    "1306": {
      "fn": "ERC20._transfer",
      "offset": [
        7577,
        7648
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1307": {
      "fn": "ERC20._transfer",
      "offset": [
        7659,
        7706
      ],
      "op": "PUSH2",
      "path": "1",
      "statement": 24,
      "value": "0x525"
    },
    "1310": {
      "fn": "ERC20._transfer",
      "offset": [
        7680,
        7686
      ],
      "op": "DUP4",
      "path": "1"
    },
    "1311": {
      "fn": "ERC20._transfer",
      "offset": [
        7688,
        7697
      ],
      "op": "DUP4",
      "path": "1"
    },
    "1312": {
      "fn": "ERC20._transfer",
      "offset": [
        7699,
        7705
      ],
      "op": "DUP4",
      "path": "1"
    },
    "1313": {
      "fn": "ERC20._transfer",
      "offset": [
        7659,
        7679
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x5F8"
    },
    "1316": {
      "fn": "ERC20._transfer",
      "jump": "i",
      "offset": [
        7659,
        7706
      ],
      "op": "JUMP",
      "path": "1"
    },
    "1317": {
      "fn": "ERC20._transfer",
      "offset": [
        7659,
        7706
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1318": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1320": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1322": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1324": {
      "op": "SHL"
    },
    "1325": {
      "op": "SUB"
    },
    "1326": {
      "fn": "ERC20._transfer",
      "offset": [
        7741,
        7758
      ],
      "op": "DUP4",
      "path": "1"
    },
    "1327": {
      "fn": "ERC20._transfer",
      "offset": [
        7741,
        7758
      ],
      "op": "AND",
      "path": "1"
    },
    "1328": {
      "fn": "ERC20._transfer",
      "offset": [
        7717,
        7738
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "1330": {
      "fn": "ERC20._transfer",
      "offset": [
        7741,
        7758
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1331": {
      "fn": "ERC20._transfer",
      "offset": [
        7741,
        7758
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1332": {
      "fn": "ERC20._transfer",
      "offset": [
        7741,
        7758
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1333": {
      "fn": "ERC20._transfer",
      "offset": [
        7741,
        7758
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "1335": {
      "fn": "ERC20._transfer",
      "offset": [
        7741,
        7758
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1336": {
      "fn": "ERC20._transfer",
      "offset": [
        7741,
        7758
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1337": {
      "fn": "ERC20._transfer",
      "offset": [
        7741,
        7758
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1338": {
      "fn": "ERC20._transfer",
      "offset": [
        7741,
        7758
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "1340": {
      "fn": "ERC20._transfer",
      "offset": [
        7741,
        7758
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1341": {
      "fn": "ERC20._transfer",
      "offset": [
        7741,
        7758
      ],
      "op": "KECCAK256",
      "path": "1"
    },
    "1342": {
      "fn": "ERC20._transfer",
      "offset": [
        7741,
        7758
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "1343": {
      "fn": "ERC20._transfer",
      "offset": [
        7776,
        7799
      ],
      "op": "DUP2",
      "path": "1",
      "statement": 25
    },
    "1344": {
      "fn": "ERC20._transfer",
      "offset": [
        7776,
        7799
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1345": {
      "fn": "ERC20._transfer",
      "offset": [
        7776,
        7799
      ],
      "op": "LT",
      "path": "1"
    },
    "1346": {
      "branch": 36,
      "fn": "ERC20._transfer",
      "offset": [
        7776,
        7799
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "1347": {
      "fn": "ERC20._transfer",
      "offset": [
        7768,
        7842
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x55E"
    },
    "1350": {
      "branch": 36,
      "fn": "ERC20._transfer",
      "offset": [
        7768,
        7842
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "1351": {
      "fn": "ERC20._transfer",
      "offset": [
        7768,
        7842
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "1353": {
      "fn": "ERC20._transfer",
      "offset": [
        7768,
        7842
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "1354": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1358": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1360": {
      "op": "SHL"
    },
    "1361": {
      "fn": "ERC20._transfer",
      "offset": [
        7768,
        7842
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1362": {
      "fn": "ERC20._transfer",
      "offset": [
        7768,
        7842
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1363": {
      "fn": "ERC20._transfer",
      "offset": [
        7768,
        7842
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "1365": {
      "fn": "ERC20._transfer",
      "offset": [
        7768,
        7842
      ],
      "op": "ADD",
      "path": "1"
    },
    "1366": {
      "fn": "ERC20._transfer",
      "offset": [
        7768,
        7842
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x2B6"
    },
    "1369": {
      "fn": "ERC20._transfer",
      "offset": [
        7768,
        7842
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1370": {
      "fn": "ERC20._transfer",
      "offset": [
        7768,
        7842
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x7AE"
    },
    "1373": {
      "fn": "ERC20._transfer",
      "jump": "i",
      "offset": [
        7768,
        7842
      ],
      "op": "JUMP",
      "path": "1"
    },
    "1374": {
      "fn": "ERC20._transfer",
      "offset": [
        7768,
        7842
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1375": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1377": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1379": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1381": {
      "op": "SHL"
    },
    "1382": {
      "op": "SUB"
    },
    "1383": {
      "fn": "ERC20._transfer",
      "offset": [
        7876,
        7893
      ],
      "op": "DUP1",
      "path": "1",
      "statement": 26
    },
    "1384": {
      "fn": "ERC20._transfer",
      "offset": [
        7876,
        7893
      ],
      "op": "DUP6",
      "path": "1"
    },
    "1385": {
      "fn": "ERC20._transfer",
      "offset": [
        7876,
        7893
      ],
      "op": "AND",
      "path": "1"
    },
    "1386": {
      "fn": "ERC20._transfer",
      "offset": [
        7876,
        7885
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "1388": {
      "fn": "ERC20._transfer",
      "offset": [
        7876,
        7893
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1389": {
      "fn": "ERC20._transfer",
      "offset": [
        7876,
        7893
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1390": {
      "fn": "ERC20._transfer",
      "offset": [
        7876,
        7893
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1391": {
      "fn": "ERC20._transfer",
      "offset": [
        7876,
        7893
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "1393": {
      "fn": "ERC20._transfer",
      "offset": [
        7876,
        7893
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1394": {
      "fn": "ERC20._transfer",
      "offset": [
        7876,
        7893
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1395": {
      "fn": "ERC20._transfer",
      "offset": [
        7876,
        7893
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1396": {
      "fn": "ERC20._transfer",
      "offset": [
        7876,
        7893
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "1398": {
      "fn": "ERC20._transfer",
      "offset": [
        7876,
        7893
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1399": {
      "fn": "ERC20._transfer",
      "offset": [
        7876,
        7893
      ],
      "op": "DUP3",
      "path": "1"
    },
    "1400": {
      "fn": "ERC20._transfer",
      "offset": [
        7876,
        7893
      ],
      "op": "KECCAK256",
      "path": "1"
    },
    "1401": {
      "fn": "ERC20._transfer",
      "offset": [
        7896,
        7918
      ],
      "op": "DUP6",
      "path": "1"
    },
    "1402": {
      "fn": "ERC20._transfer",
      "offset": [
        7896,
        7918
      ],
      "op": "DUP6",
      "path": "1"
    },
    "1403": {
      "fn": "ERC20._transfer",
      "offset": [
        7896,
        7918
      ],
      "op": "SUB",
      "path": "1"
    },
    "1404": {
      "fn": "ERC20._transfer",
      "offset": [
        7876,
        7918
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1405": {
      "fn": "ERC20._transfer",
      "offset": [
        7876,
        7918
      ],
      "op": "SSTORE",
      "path": "1"
    },
    "1406": {
      "fn": "ERC20._transfer",
      "offset": [
        7938,
        7958
      ],
      "op": "SWAP2",
      "path": "1",
      "statement": 27
    },
    "1407": {
      "fn": "ERC20._transfer",
      "offset": [
        7938,
        7958
      ],
      "op": "DUP6",
      "path": "1"
    },
    "1408": {
      "fn": "ERC20._transfer",
      "offset": [
        7938,
        7958
      ],
      "op": "AND",
      "path": "1"
    },
    "1409": {
      "fn": "ERC20._transfer",
      "offset": [
        7938,
        7958
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1410": {
      "fn": "ERC20._transfer",
      "offset": [
        7938,
        7958
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1411": {
      "fn": "ERC20._transfer",
      "offset": [
        7938,
        7958
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1412": {
      "fn": "ERC20._transfer",
      "offset": [
        7938,
        7958
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1413": {
      "fn": "ERC20._transfer",
      "offset": [
        7938,
        7958
      ],
      "op": "KECCAK256",
      "path": "1"
    },
    "1414": {
      "fn": "ERC20._transfer",
      "offset": [
        7938,
        7968
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1415": {
      "fn": "ERC20._transfer",
      "offset": [
        7938,
        7968
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "1416": {
      "fn": "ERC20._transfer",
      "offset": [
        7912,
        7918
      ],
      "op": "DUP5",
      "path": "1"
    },
    "1417": {
      "fn": "ERC20._transfer",
      "offset": [
        7912,
        7918
      ],
      "op": "SWAP3",
      "path": "1"
    },
    "1418": {
      "fn": "ERC20._transfer",
      "offset": [
        7876,
        7885
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1419": {
      "fn": "ERC20._transfer",
      "offset": [
        7938,
        7968
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x595"
    },
    "1422": {
      "fn": "ERC20._transfer",
      "offset": [
        7938,
        7968
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1423": {
      "fn": "ERC20._transfer",
      "offset": [
        7912,
        7918
      ],
      "op": "DUP5",
      "path": "1"
    },
    "1424": {
      "fn": "ERC20._transfer",
      "offset": [
        7912,
        7918
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1425": {
      "fn": "ERC20._transfer",
      "offset": [
        7938,
        7968
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x921"
    },
    "1428": {
      "fn": "ERC20._transfer",
      "jump": "i",
      "offset": [
        7938,
        7968
      ],
      "op": "JUMP",
      "path": "1"
    },
    "1429": {
      "fn": "ERC20._transfer",
      "offset": [
        7938,
        7968
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1430": {
      "fn": "ERC20._transfer",
      "offset": [
        7938,
        7968
      ],
      "op": "SWAP3",
      "path": "1"
    },
    "1431": {
      "fn": "ERC20._transfer",
      "offset": [
        7938,
        7968
      ],
      "op": "POP",
      "path": "1"
    },
    "1432": {
      "fn": "ERC20._transfer",
      "offset": [
        7938,
        7968
      ],
      "op": "POP",
      "path": "1"
    },
    "1433": {
      "fn": "ERC20._transfer",
      "offset": [
        7938,
        7968
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1434": {
      "fn": "ERC20._transfer",
      "offset": [
        7938,
        7968
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1435": {
      "fn": "ERC20._transfer",
      "offset": [
        7938,
        7968
      ],
      "op": "SSTORE",
      "path": "1"
    },
    "1436": {
      "fn": "ERC20._transfer",
      "offset": [
        7938,
        7968
      ],
      "op": "POP",
      "path": "1"
    },
    "1437": {
      "fn": "ERC20._transfer",
      "offset": [
        8001,
        8010
      ],
      "op": "DUP3",
      "path": "1",
      "statement": 28
    },
    "1438": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1440": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1442": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1444": {
      "op": "SHL"
    },
    "1445": {
      "op": "SUB"
    },
    "1446": {
      "fn": "ERC20._transfer",
      "offset": [
        7984,
        8019
      ],
      "op": "AND",
      "path": "1"
    },
    "1447": {
      "fn": "ERC20._transfer",
      "offset": [
        7993,
        7999
      ],
      "op": "DUP5",
      "path": "1"
    },
    "1448": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1450": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1452": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1454": {
      "op": "SHL"
    },
    "1455": {
      "op": "SUB"
    },
    "1456": {
      "fn": "ERC20._transfer",
      "offset": [
        7984,
        8019
      ],
      "op": "AND",
      "path": "1"
    },
    "1457": {
      "fn": "ERC20._transfer",
      "offset": [
        7984,
        8019
      ],
      "op": "PUSH32",
      "path": "1",
      "value": "0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
    },
    "1490": {
      "fn": "ERC20._transfer",
      "offset": [
        8012,
        8018
      ],
      "op": "DUP5",
      "path": "1"
    },
    "1491": {
      "fn": "ERC20._transfer",
      "offset": [
        7984,
        8019
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "1493": {
      "fn": "ERC20._transfer",
      "offset": [
        7984,
        8019
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "1494": {
      "fn": "ERC20._transfer",
      "offset": [
        7984,
        8019
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x5DF"
    },
    "1497": {
      "fn": "ERC20._transfer",
      "offset": [
        7984,
        8019
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "1498": {
      "fn": "ERC20._transfer",
      "offset": [
        7984,
        8019
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1499": {
      "fn": "ERC20._transfer",
      "offset": [
        7984,
        8019
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x90A"
    },
    "1502": {
      "fn": "ERC20._transfer",
      "jump": "i",
      "offset": [
        7984,
        8019
      ],
      "op": "JUMP",
      "path": "1"
    },
    "1503": {
      "fn": "ERC20._transfer",
      "offset": [
        7984,
        8019
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1504": {
      "fn": "ERC20._transfer",
      "offset": [
        7984,
        8019
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "1506": {
      "fn": "ERC20._transfer",
      "offset": [
        7984,
        8019
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "1507": {
      "fn": "ERC20._transfer",
      "offset": [
        7984,
        8019
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1508": {
      "fn": "ERC20._transfer",
      "offset": [
        7984,
        8019
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "1509": {
      "fn": "ERC20._transfer",
      "offset": [
        7984,
        8019
      ],
      "op": "SUB",
      "path": "1"
    },
    "1510": {
      "fn": "ERC20._transfer",
      "offset": [
        7984,
        8019
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1511": {
      "fn": "ERC20._transfer",
      "offset": [
        7984,
        8019
      ],
      "op": "LOG3",
      "path": "1"
    },
    "1512": {
      "fn": "ERC20._transfer",
      "offset": [
        8030,
        8076
      ],
      "op": "PUSH2",
      "path": "1",
      "statement": 29,
      "value": "0x5F2"
    },
    "1515": {
      "fn": "ERC20._transfer",
      "offset": [
        8050,
        8056
      ],
      "op": "DUP5",
      "path": "1"
    },
    "1516": {
      "fn": "ERC20._transfer",
      "offset": [
        8058,
        8067
      ],
      "op": "DUP5",
      "path": "1"
    },
    "1517": {
      "fn": "ERC20._transfer",
      "offset": [
        8069,
        8075
      ],
      "op": "DUP5",
      "path": "1"
    },
    "1518": {
      "fn": "ERC20._transfer",
      "offset": [
        8030,
        8049
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x5F8"
    },
    "1521": {
      "fn": "ERC20._transfer",
      "jump": "i",
      "offset": [
        8030,
        8076
      ],
      "op": "JUMP",
      "path": "1"
    },
    "1522": {
      "fn": "ERC20._transfer",
      "offset": [
        8030,
        8076
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1523": {
      "fn": "ERC20._transfer",
      "offset": [
        7370,
        8083
      ],
      "op": "POP",
      "path": "1"
    },
    "1524": {
      "fn": "ERC20._transfer",
      "offset": [
        7370,
        8083
      ],
      "op": "POP",
      "path": "1"
    },
    "1525": {
      "fn": "ERC20._transfer",
      "offset": [
        7370,
        8083
      ],
      "op": "POP",
      "path": "1"
    },
    "1526": {
      "fn": "ERC20._transfer",
      "offset": [
        7370,
        8083
      ],
      "op": "POP",
      "path": "1"
    },
    "1527": {
      "fn": "ERC20._transfer",
      "jump": "o",
      "offset": [
        7370,
        8083
      ],
      "op": "JUMP",
      "path": "1"
    },
    "1528": {
      "fn": "ERC20._beforeTokenTransfer",
      "offset": [
        11021,
        11142
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1529": {
      "fn": "ERC20._beforeTokenTransfer",
      "offset": [
        11021,
        11142
      ],
      "op": "POP",
      "path": "1"
    },
    "1530": {
      "fn": "ERC20._beforeTokenTransfer",
      "offset": [
        11021,
        11142
      ],
      "op": "POP",
      "path": "1"
    },
    "1531": {
      "fn": "ERC20._beforeTokenTransfer",
      "offset": [
        11021,
        11142
      ],
      "op": "POP",
      "path": "1"
    },
    "1532": {
      "fn": "ERC20._beforeTokenTransfer",
      "jump": "o",
      "offset": [
        11021,
        11142
      ],
      "op": "JUMP",
      "path": "1"
    },
    "1533": {
      "op": "JUMPDEST"
    },
    "1534": {
      "op": "DUP1"
    },
    "1535": {
      "op": "CALLDATALOAD"
    },
    "1536": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1538": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1540": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1542": {
      "op": "SHL"
    },
    "1543": {
      "op": "SUB"
    },
    "1544": {
      "op": "DUP2"
    },
    "1545": {
      "op": "AND"
    },
    "1546": {
      "op": "DUP2"
    },
    "1547": {
      "op": "EQ"
    },
    "1548": {
      "op": "PUSH2",
      "value": "0x351"
    },
    "1551": {
      "op": "JUMPI"
    },
    "1552": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1554": {
      "op": "DUP1"
    },
    "1555": {
      "op": "REVERT"
    },
    "1556": {
      "op": "JUMPDEST"
    },
    "1557": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1559": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1561": {
      "op": "DUP3"
    },
    "1562": {
      "op": "DUP5"
    },
    "1563": {
      "op": "SUB"
    },
    "1564": {
      "op": "SLT"
    },
    "1565": {
      "op": "ISZERO"
    },
    "1566": {
      "op": "PUSH2",
      "value": "0x625"
    },
    "1569": {
      "op": "JUMPI"
    },
    "1570": {
      "op": "DUP1"
    },
    "1571": {
      "op": "DUP2"
    },
    "1572": {
      "op": "REVERT"
    },
    "1573": {
      "op": "JUMPDEST"
    },
    "1574": {
      "op": "PUSH2",
      "value": "0x62E"
    },
    "1577": {
      "op": "DUP3"
    },
    "1578": {
      "op": "PUSH2",
      "value": "0x5FD"
    },
    "1581": {
      "jump": "i",
      "op": "JUMP"
    },
    "1582": {
      "op": "JUMPDEST"
    },
    "1583": {
      "op": "SWAP4"
    },
    "1584": {
      "op": "SWAP3"
    },
    "1585": {
      "op": "POP"
    },
    "1586": {
      "op": "POP"
    },
    "1587": {
      "op": "POP"
    },
    "1588": {
      "jump": "o",
      "op": "JUMP"
    },
    "1589": {
      "op": "JUMPDEST"
    },
    "1590": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1592": {
      "op": "DUP1"
    },
    "1593": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1595": {
      "op": "DUP4"
    },
    "1596": {
      "op": "DUP6"
    },
    "1597": {
      "op": "SUB"
    },
    "1598": {
      "op": "SLT"
    },
    "1599": {
      "op": "ISZERO"
    },
    "1600": {
      "op": "PUSH2",
      "value": "0x647"
    },
    "1603": {
      "op": "JUMPI"
    },
    "1604": {
      "op": "DUP1"
    },
    "1605": {
      "op": "DUP2"
    },
    "1606": {
      "op": "REVERT"
    },
    "1607": {
      "op": "JUMPDEST"
    },
    "1608": {
      "op": "PUSH2",
      "value": "0x650"
    },
    "1611": {
      "op": "DUP4"
    },
    "1612": {
      "op": "PUSH2",
      "value": "0x5FD"
    },
    "1615": {
      "jump": "i",
      "op": "JUMP"
    },
    "1616": {
      "op": "JUMPDEST"
    },
    "1617": {
      "op": "SWAP2"
    },
    "1618": {
      "op": "POP"
    },
    "1619": {
      "op": "PUSH2",
      "value": "0x65E"
    },
    "1622": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1624": {
      "op": "DUP5"
    },
    "1625": {
      "op": "ADD"
    },
    "1626": {
      "op": "PUSH2",
      "value": "0x5FD"
    },
    "1629": {
      "jump": "i",
      "op": "JUMP"
    },
    "1630": {
      "op": "JUMPDEST"
    },
    "1631": {
      "op": "SWAP1"
    },
    "1632": {
      "op": "POP"
    },
    "1633": {
      "op": "SWAP3"
    },
    "1634": {
      "op": "POP"
    },
    "1635": {
      "op": "SWAP3"
    },
    "1636": {
      "op": "SWAP1"
    },
    "1637": {
      "op": "POP"
    },
    "1638": {
      "jump": "o",
      "op": "JUMP"
    },
    "1639": {
      "op": "JUMPDEST"
    },
    "1640": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1642": {
      "op": "DUP1"
    },
    "1643": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1645": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "1647": {
      "op": "DUP5"
    },
    "1648": {
      "op": "DUP7"
    },
    "1649": {
      "op": "SUB"
    },
    "1650": {
      "op": "SLT"
    },
    "1651": {
      "op": "ISZERO"
    },
    "1652": {
      "op": "PUSH2",
      "value": "0x67B"
    },
    "1655": {
      "op": "JUMPI"
    },
    "1656": {
      "op": "DUP1"
    },
    "1657": {
      "op": "DUP2"
    },
    "1658": {
      "op": "REVERT"
    },
    "1659": {
      "op": "JUMPDEST"
    },
    "1660": {
      "op": "PUSH2",
      "value": "0x684"
    },
    "1663": {
      "op": "DUP5"
    },
    "1664": {
      "op": "PUSH2",
      "value": "0x5FD"
    },
    "1667": {
      "jump": "i",
      "op": "JUMP"
    },
    "1668": {
      "op": "JUMPDEST"
    },
    "1669": {
      "op": "SWAP3"
    },
    "1670": {
      "op": "POP"
    },
    "1671": {
      "op": "PUSH2",
      "value": "0x692"
    },
    "1674": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1676": {
      "op": "DUP6"
    },
    "1677": {
      "op": "ADD"
    },
    "1678": {
      "op": "PUSH2",
      "value": "0x5FD"
    },
    "1681": {
      "jump": "i",
      "op": "JUMP"
    },
    "1682": {
      "op": "JUMPDEST"
    },
    "1683": {
      "op": "SWAP2"
    },
    "1684": {
      "op": "POP"
    },
    "1685": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1687": {
      "op": "DUP5"
    },
    "1688": {
      "op": "ADD"
    },
    "1689": {
      "op": "CALLDATALOAD"
    },
    "1690": {
      "op": "SWAP1"
    },
    "1691": {
      "op": "POP"
    },
    "1692": {
      "op": "SWAP3"
    },
    "1693": {
      "op": "POP"
    },
    "1694": {
      "op": "SWAP3"
    },
    "1695": {
      "op": "POP"
    },
    "1696": {
      "op": "SWAP3"
    },
    "1697": {
      "jump": "o",
      "op": "JUMP"
    },
    "1698": {
      "op": "JUMPDEST"
    },
    "1699": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1701": {
      "op": "DUP1"
    },
    "1702": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1704": {
      "op": "DUP4"
    },
    "1705": {
      "op": "DUP6"
    },
    "1706": {
      "op": "SUB"
    },
    "1707": {
      "op": "SLT"
    },
    "1708": {
      "op": "ISZERO"
    },
    "1709": {
      "op": "PUSH2",
      "value": "0x6B4"
    },
    "1712": {
      "op": "JUMPI"
    },
    "1713": {
      "op": "DUP2"
    },
    "1714": {
      "op": "DUP3"
    },
    "1715": {
      "op": "REVERT"
    },
    "1716": {
      "op": "JUMPDEST"
    },
    "1717": {
      "op": "PUSH2",
      "value": "0x6BD"
    },
    "1720": {
      "op": "DUP4"
    },
    "1721": {
      "op": "PUSH2",
      "value": "0x5FD"
    },
    "1724": {
      "jump": "i",
      "op": "JUMP"
    },
    "1725": {
      "op": "JUMPDEST"
    },
    "1726": {
      "op": "SWAP5"
    },
    "1727": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1729": {
      "op": "SWAP4"
    },
    "1730": {
      "op": "SWAP1"
    },
    "1731": {
      "op": "SWAP4"
    },
    "1732": {
      "op": "ADD"
    },
    "1733": {
      "op": "CALLDATALOAD"
    },
    "1734": {
      "op": "SWAP4"
    },
    "1735": {
      "op": "POP"
    },
    "1736": {
      "op": "POP"
    },
    "1737": {
      "op": "POP"
    },
    "1738": {
      "jump": "o",
      "op": "JUMP"
    },
    "1739": {
      "op": "JUMPDEST"
    },
    "1740": {
      "op": "SWAP1"
    },
    "1741": {
      "op": "ISZERO"
    },
    "1742": {
      "op": "ISZERO"
    },
    "1743": {
      "op": "DUP2"
    },
    "1744": {
      "op": "MSTORE"
    },
    "1745": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1747": {
      "op": "ADD"
    },
    "1748": {
      "op": "SWAP1"
    },
    "1749": {
      "jump": "o",
      "op": "JUMP"
    },
    "1750": {
      "op": "JUMPDEST"
    },
    "1751": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1753": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1755": {
      "op": "DUP1"
    },
    "1756": {
      "op": "DUP4"
    },
    "1757": {
      "op": "MSTORE"
    },
    "1758": {
      "op": "DUP4"
    },
    "1759": {
      "op": "MLOAD"
    },
    "1760": {
      "op": "DUP1"
    },
    "1761": {
      "op": "DUP3"
    },
    "1762": {
      "op": "DUP6"
    },
    "1763": {
      "op": "ADD"
    },
    "1764": {
      "op": "MSTORE"
    },
    "1765": {
      "op": "DUP3"
    },
    "1766": {
      "op": "JUMPDEST"
    },
    "1767": {
      "op": "DUP2"
    },
    "1768": {
      "op": "DUP2"
    },
    "1769": {
      "op": "LT"
    },
    "1770": {
      "op": "ISZERO"
    },
    "1771": {
      "op": "PUSH2",
      "value": "0x702"
    },
    "1774": {
      "op": "JUMPI"
    },
    "1775": {
      "op": "DUP6"
    },
    "1776": {
      "op": "DUP2"
    },
    "1777": {
      "op": "ADD"
    },
    "1778": {
      "op": "DUP4"
    },
    "1779": {
      "op": "ADD"
    },
    "1780": {
      "op": "MLOAD"
    },
    "1781": {
      "op": "DUP6"
    },
    "1782": {
      "op": "DUP3"
    },
    "1783": {
      "op": "ADD"
    },
    "1784": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1786": {
      "op": "ADD"
    },
    "1787": {
      "op": "MSTORE"
    },
    "1788": {
      "op": "DUP3"
    },
    "1789": {
      "op": "ADD"
    },
    "1790": {
      "op": "PUSH2",
      "value": "0x6E6"
    },
    "1793": {
      "op": "JUMP"
    },
    "1794": {
      "op": "JUMPDEST"
    },
    "1795": {
      "op": "DUP2"
    },
    "1796": {
      "op": "DUP2"
    },
    "1797": {
      "op": "GT"
    },
    "1798": {
      "op": "ISZERO"
    },
    "1799": {
      "op": "PUSH2",
      "value": "0x713"
    },
    "1802": {
      "op": "JUMPI"
    },
    "1803": {
      "op": "DUP4"
    },
    "1804": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1806": {
      "op": "DUP4"
    },
    "1807": {
      "op": "DUP8"
    },
    "1808": {
      "op": "ADD"
    },
    "1809": {
      "op": "ADD"
    },
    "1810": {
      "op": "MSTORE"
    },
    "1811": {
      "op": "JUMPDEST"
    },
    "1812": {
      "op": "POP"
    },
    "1813": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "1815": {
      "op": "ADD"
    },
    "1816": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "1818": {
      "op": "NOT"
    },
    "1819": {
      "op": "AND"
    },
    "1820": {
      "op": "SWAP3"
    },
    "1821": {
      "op": "SWAP1"
    },
    "1822": {
      "op": "SWAP3"
    },
    "1823": {
      "op": "ADD"
    },
    "1824": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1826": {
      "op": "ADD"
    },
    "1827": {
      "op": "SWAP4"
    },
    "1828": {
      "op": "SWAP3"
    },
    "1829": {
      "op": "POP"
    },
    "1830": {
      "op": "POP"
    },
    "1831": {
      "op": "POP"
    },
    "1832": {
      "jump": "o",
      "op": "JUMP"
    },
    "1833": {
      "op": "JUMPDEST"
    },
    "1834": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1836": {
      "op": "DUP1"
    },
    "1837": {
      "op": "DUP3"
    },
    "1838": {
      "op": "MSTORE"
    },
    "1839": {
      "op": "PUSH1",
      "value": "0x23"
    },
    "1841": {
      "op": "SWAP1"
    },
    "1842": {
      "op": "DUP3"
    },
    "1843": {
      "op": "ADD"
    },
    "1844": {
      "op": "MSTORE"
    },
    "1845": {
      "op": "PUSH32",
      "value": "0x45524332303A207472616E7366657220746F20746865207A65726F2061646472"
    },
    "1878": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1880": {
      "op": "DUP3"
    },
    "1881": {
      "op": "ADD"
    },
    "1882": {
      "op": "MSTORE"
    },
    "1883": {
      "op": "PUSH3",
      "value": "0x657373"
    },
    "1887": {
      "op": "PUSH1",
      "value": "0xE8"
    },
    "1889": {
      "op": "SHL"
    },
    "1890": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "1892": {
      "op": "DUP3"
    },
    "1893": {
      "op": "ADD"
    },
    "1894": {
      "op": "MSTORE"
    },
    "1895": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "1897": {
      "op": "ADD"
    },
    "1898": {
      "op": "SWAP1"
    },
    "1899": {
      "jump": "o",
      "op": "JUMP"
    },
    "1900": {
      "op": "JUMPDEST"
    },
    "1901": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1903": {
      "op": "DUP1"
    },
    "1904": {
      "op": "DUP3"
    },
    "1905": {
      "op": "MSTORE"
    },
    "1906": {
      "op": "PUSH1",
      "value": "0x22"
    },
    "1908": {
      "op": "SWAP1"
    },
    "1909": {
      "op": "DUP3"
    },
    "1910": {
      "op": "ADD"
    },
    "1911": {
      "op": "MSTORE"
    },
    "1912": {
      "op": "PUSH32",
      "value": "0x45524332303A20617070726F766520746F20746865207A65726F206164647265"
    },
    "1945": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1947": {
      "op": "DUP3"
    },
    "1948": {
      "op": "ADD"
    },
    "1949": {
      "op": "MSTORE"
    },
    "1950": {
      "op": "PUSH2",
      "value": "0x7373"
    },
    "1953": {
      "op": "PUSH1",
      "value": "0xF0"
    },
    "1955": {
      "op": "SHL"
    },
    "1956": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "1958": {
      "op": "DUP3"
    },
    "1959": {
      "op": "ADD"
    },
    "1960": {
      "op": "MSTORE"
    },
    "1961": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "1963": {
      "op": "ADD"
    },
    "1964": {
      "op": "SWAP1"
    },
    "1965": {
      "jump": "o",
      "op": "JUMP"
    },
    "1966": {
      "op": "JUMPDEST"
    },
    "1967": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1969": {
      "op": "DUP1"
    },
    "1970": {
      "op": "DUP3"
    },
    "1971": {
      "op": "MSTORE"
    },
    "1972": {
      "op": "PUSH1",
      "value": "0x26"
    },
    "1974": {
      "op": "SWAP1"
    },
    "1975": {
      "op": "DUP3"
    },
    "1976": {
      "op": "ADD"
    },
    "1977": {
      "op": "MSTORE"
    },
    "1978": {
      "op": "PUSH32",
      "value": "0x45524332303A207472616E7366657220616D6F756E7420657863656564732062"
    },
    "2011": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2013": {
      "op": "DUP3"
    },
    "2014": {
      "op": "ADD"
    },
    "2015": {
      "op": "MSTORE"
    },
    "2016": {
      "op": "PUSH6",
      "value": "0x616C616E6365"
    },
    "2023": {
      "op": "PUSH1",
      "value": "0xD0"
    },
    "2025": {
      "op": "SHL"
    },
    "2026": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "2028": {
      "op": "DUP3"
    },
    "2029": {
      "op": "ADD"
    },
    "2030": {
      "op": "MSTORE"
    },
    "2031": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "2033": {
      "op": "ADD"
    },
    "2034": {
      "op": "SWAP1"
    },
    "2035": {
      "jump": "o",
      "op": "JUMP"
    },
    "2036": {
      "op": "JUMPDEST"
    },
    "2037": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2039": {
      "op": "DUP1"
    },
    "2040": {
      "op": "DUP3"
    },
    "2041": {
      "op": "MSTORE"
    },
    "2042": {
      "op": "PUSH1",
      "value": "0x28"
    },
    "2044": {
      "op": "SWAP1"
    },
    "2045": {
      "op": "DUP3"
    },
    "2046": {
      "op": "ADD"
    },
    "2047": {
      "op": "MSTORE"
    },
    "2048": {
      "op": "PUSH32",
      "value": "0x45524332303A207472616E7366657220616D6F756E7420657863656564732061"
    },
    "2081": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2083": {
      "op": "DUP3"
    },
    "2084": {
      "op": "ADD"
    },
    "2085": {
      "op": "MSTORE"
    },
    "2086": {
      "op": "PUSH8",
      "value": "0x6C6C6F77616E6365"
    },
    "2095": {
      "op": "PUSH1",
      "value": "0xC0"
    },
    "2097": {
      "op": "SHL"
    },
    "2098": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "2100": {
      "op": "DUP3"
    },
    "2101": {
      "op": "ADD"
    },
    "2102": {
      "op": "MSTORE"
    },
    "2103": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "2105": {
      "op": "ADD"
    },
    "2106": {
      "op": "SWAP1"
    },
    "2107": {
      "jump": "o",
      "op": "JUMP"
    },
    "2108": {
      "op": "JUMPDEST"
    },
    "2109": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2111": {
      "op": "DUP1"
    },
    "2112": {
      "op": "DUP3"
    },
    "2113": {
      "op": "MSTORE"
    },
    "2114": {
      "op": "PUSH1",
      "value": "0x25"
    },
    "2116": {
      "op": "SWAP1"
    },
    "2117": {
      "op": "DUP3"
    },
    "2118": {
      "op": "ADD"
    },
    "2119": {
      "op": "MSTORE"
    },
    "2120": {
      "op": "PUSH32",
      "value": "0x45524332303A207472616E736665722066726F6D20746865207A65726F206164"
    },
    "2153": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2155": {
      "op": "DUP3"
    },
    "2156": {
      "op": "ADD"
    },
    "2157": {
      "op": "MSTORE"
    },
    "2158": {
      "op": "PUSH5",
      "value": "0x6472657373"
    },
    "2164": {
      "op": "PUSH1",
      "value": "0xD8"
    },
    "2166": {
      "op": "SHL"
    },
    "2167": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "2169": {
      "op": "DUP3"
    },
    "2170": {
      "op": "ADD"
    },
    "2171": {
      "op": "MSTORE"
    },
    "2172": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "2174": {
      "op": "ADD"
    },
    "2175": {
      "op": "SWAP1"
    },
    "2176": {
      "jump": "o",
      "op": "JUMP"
    },
    "2177": {
      "op": "JUMPDEST"
    },
    "2178": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2180": {
      "op": "DUP1"
    },
    "2181": {
      "op": "DUP3"
    },
    "2182": {
      "op": "MSTORE"
    },
    "2183": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2185": {
      "op": "SWAP1"
    },
    "2186": {
      "op": "DUP3"
    },
    "2187": {
      "op": "ADD"
    },
    "2188": {
      "op": "MSTORE"
    },
    "2189": {
      "op": "PUSH32",
      "value": "0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464"
    },
    "2222": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2224": {
      "op": "DUP3"
    },
    "2225": {
      "op": "ADD"
    },
    "2226": {
      "op": "MSTORE"
    },
    "2227": {
      "op": "PUSH4",
      "value": "0x72657373"
    },
    "2232": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "2234": {
      "op": "SHL"
    },
    "2235": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "2237": {
      "op": "DUP3"
    },
    "2238": {
      "op": "ADD"
    },
    "2239": {
      "op": "MSTORE"
    },
    "2240": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "2242": {
      "op": "ADD"
    },
    "2243": {
      "op": "SWAP1"
    },
    "2244": {
      "jump": "o",
      "op": "JUMP"
    },
    "2245": {
      "op": "JUMPDEST"
    },
    "2246": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2248": {
      "op": "DUP1"
    },
    "2249": {
      "op": "DUP3"
    },
    "2250": {
      "op": "MSTORE"
    },
    "2251": {
      "op": "PUSH1",
      "value": "0x25"
    },
    "2253": {
      "op": "SWAP1"
    },
    "2254": {
      "op": "DUP3"
    },
    "2255": {
      "op": "ADD"
    },
    "2256": {
      "op": "MSTORE"
    },
    "2257": {
      "op": "PUSH32",
      "value": "0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77"
    },
    "2290": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2292": {
      "op": "DUP3"
    },
    "2293": {
      "op": "ADD"
    },
    "2294": {
      "op": "MSTORE"
    },
    "2295": {
      "op": "PUSH5",
      "value": "0x207A65726F"
    },
    "2301": {
      "op": "PUSH1",
      "value": "0xD8"
    },
    "2303": {
      "op": "SHL"
    },
    "2304": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "2306": {
      "op": "DUP3"
    },
    "2307": {
      "op": "ADD"
    },
    "2308": {
      "op": "MSTORE"
    },
    "2309": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "2311": {
      "op": "ADD"
    },
    "2312": {
      "op": "SWAP1"
    },
    "2313": {
      "jump": "o",
      "op": "JUMP"
    },
    "2314": {
      "op": "JUMPDEST"
    },
    "2315": {
      "op": "SWAP1"
    },
    "2316": {
      "op": "DUP2"
    },
    "2317": {
      "op": "MSTORE"
    },
    "2318": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2320": {
      "op": "ADD"
    },
    "2321": {
      "op": "SWAP1"
    },
    "2322": {
      "jump": "o",
      "op": "JUMP"
    },
    "2323": {
      "op": "JUMPDEST"
    },
    "2324": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "2326": {
      "op": "SWAP2"
    },
    "2327": {
      "op": "SWAP1"
    },
    "2328": {
      "op": "SWAP2"
    },
    "2329": {
      "op": "AND"
    },
    "2330": {
      "op": "DUP2"
    },
    "2331": {
      "op": "MSTORE"
    },
    "2332": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2334": {
      "op": "ADD"
    },
    "2335": {
      "op": "SWAP1"
    },
    "2336": {
      "jump": "o",
      "op": "JUMP"
    },
    "2337": {
      "op": "JUMPDEST"
    },
    "2338": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2340": {
      "op": "DUP3"
    },
    "2341": {
      "op": "NOT"
    },
    "2342": {
      "op": "DUP3"
    },
    "2343": {
      "op": "GT"
    },
    "2344": {
      "op": "ISZERO"
    },
    "2345": {
      "op": "PUSH2",
      "value": "0x940"
    },
    "2348": {
      "op": "JUMPI"
    },
    "2349": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "2354": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "2356": {
      "op": "SHL"
    },
    "2357": {
      "op": "DUP2"
    },
    "2358": {
      "op": "MSTORE"
    },
    "2359": {
      "op": "PUSH1",
      "value": "0x11"
    },
    "2361": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "2363": {
      "op": "MSTORE"
    },
    "2364": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2366": {
      "op": "DUP2"
    },
    "2367": {
      "op": "REVERT"
    },
    "2368": {
      "op": "JUMPDEST"
    },
    "2369": {
      "op": "POP"
    },
    "2370": {
      "op": "ADD"
    },
    "2371": {
      "op": "SWAP1"
    },
    "2372": {
      "jump": "o",
      "op": "JUMP"
    },
    "2373": {
      "op": "JUMPDEST"
    },
    "2374": {
      "op": "PUSH1",
      "value": "0x2"
    },
    "2376": {
      "op": "DUP2"
    },
    "2377": {
      "op": "DIV"
    },
    "2378": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2380": {
      "op": "DUP3"
    },
    "2381": {
      "op": "AND"
    },
    "2382": {
      "op": "DUP1"
    },
    "2383": {
      "op": "PUSH2",
      "value": "0x959"
    },
    "2386": {
      "op": "JUMPI"
    },
    "2387": {
      "op": "PUSH1",
      "value": "0x7F"
    },
    "2389": {
      "op": "DUP3"
    },
    "2390": {
      "op": "AND"
    },
    "2391": {
      "op": "SWAP2"
    },
    "2392": {
      "op": "POP"
    },
    "2393": {
      "op": "JUMPDEST"
    },
    "2394": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2396": {
      "op": "DUP3"
    },
    "2397": {
      "op": "LT"
    },
    "2398": {
      "op": "DUP2"
    },
    "2399": {
      "op": "EQ"
    },
    "2400": {
      "op": "ISZERO"
    },
    "2401": {
      "op": "PUSH2",
      "value": "0x97A"
    },
    "2404": {
      "op": "JUMPI"
    },
    "2405": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "2410": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "2412": {
      "op": "SHL"
    },
    "2413": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2415": {
      "op": "MSTORE"
    },
    "2416": {
      "op": "PUSH1",
      "value": "0x22"
    },
    "2418": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "2420": {
      "op": "MSTORE"
    },
    "2421": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2423": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2425": {
      "op": "REVERT"
    },
    "2426": {
      "op": "JUMPDEST"
    },
    "2427": {
      "op": "POP"
    },
    "2428": {
      "op": "SWAP2"
    },
    "2429": {
      "op": "SWAP1"
    },
    "2430": {
      "op": "POP"
    },
    "2431": {
      "jump": "o",
      "op": "JUMP"
    }
  },
  "sha1": "e21133eb757e8e21d13737099807a16d1f16821c",
  "source": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"@openzeppelin/contracts/utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n   \n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;       \n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address _from, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_from, recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n",
  "sourceMap": "1417:10435:1:-:0;;;1996:120;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2062:13;;;;:5;;:13;;;;;:::i;:::-;-1:-1:-1;2085:17:1;;;;:7;;:17;;;;;:::i;:::-;;1996:120;;1417:10435;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1417:10435:1;;;-1:-1:-1;1417:10435:1;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:881:7;;123:3;116:4;108:6;104:17;100:27;90:2;;145:5;138;131:20;90:2;172:13;;-1:-1:-1;;;;;234:10:7;;;231:2;;;247:18;;:::i;:::-;296:2;290:9;318:4;388:2;369:13;;-1:-1:-1;;365:27:7;353:40;;349:49;;413:18;;;433:22;;;410:46;407:2;;;459:18;;:::i;:::-;495:2;488:22;519:18;;;556:15;;;552:24;;549:33;-1:-1:-1;546:2:7;;;599:5;592;585:20;546:2;625:5;616:14;;639:133;653:2;650:1;647:9;639:133;;;741:14;;;737:23;;731:30;710:14;;;706:23;;699:63;664:10;;;;639:133;;;790:2;787:1;784:9;781:2;;;849:5;844:2;839;831:6;827:15;823:24;816:39;781:2;-1:-1:-1;883:6:7;80:815;-1:-1:-1;;;;;80:815:7:o;900:596::-;;;1060:2;1048:9;1039:7;1035:23;1031:32;1028:2;;;1081:6;1073;1066:22;1028:2;1113:16;;-1:-1:-1;;;;;1178:14:7;;;1175:2;;;1210:6;1202;1195:22;1175:2;1238:63;1293:7;1284:6;1273:9;1269:22;1238:63;:::i;:::-;1228:73;;1347:2;1336:9;1332:18;1326:25;1310:41;;1376:2;1366:8;1363:16;1360:2;;;1397:6;1389;1382:22;1360:2;;1425:65;1482:7;1471:8;1460:9;1456:24;1425:65;:::i;:::-;1415:75;;;1018:478;;;;;:::o;1501:380::-;1586:1;1576:12;;1633:1;1623:12;;;1644:2;;1698:4;1690:6;1686:17;1676:27;;1644:2;1751;1743:6;1740:14;1720:18;1717:38;1714:2;;;1797:10;1792:3;1788:20;1785:1;1778:31;1832:4;1829:1;1822:15;1860:4;1857:1;1850:15;1714:2;;1556:325;;;:::o;1886:127::-;1947:10;1942:3;1938:20;1935:1;1928:31;1978:4;1975:1;1968:15;2002:4;1999:1;1992:15;1918:95;1417:10435:1;;;;;;",
  "sourcePath": "/home/ilijapet/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.3.1/contracts/token/ERC20/ERC20.sol",
  "type": "contract"
}